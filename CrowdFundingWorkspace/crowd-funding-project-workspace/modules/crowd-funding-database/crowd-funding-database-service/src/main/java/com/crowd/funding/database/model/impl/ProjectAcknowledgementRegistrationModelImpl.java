/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.ProjectAcknowledgementRegistration;
import com.crowd.funding.database.model.ProjectAcknowledgementRegistrationDOCUMENTBlobModel;
import com.crowd.funding.database.model.ProjectAcknowledgementRegistrationModel;
import com.crowd.funding.database.model.ProjectAcknowledgementRegistrationSoap;
import com.crowd.funding.database.model.ProjectAcknowledgementRegistrationVIDEOBlobModel;
import com.crowd.funding.database.service.ProjectAcknowledgementRegistrationLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectAcknowledgementRegistration service. Represents a row in the &quot;cf_acknowledgement_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectAcknowledgementRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectAcknowledgementRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectAcknowledgementRegistrationImpl
 * @see ProjectAcknowledgementRegistration
 * @see ProjectAcknowledgementRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectAcknowledgementRegistrationModelImpl extends BaseModelImpl<ProjectAcknowledgementRegistration>
	implements ProjectAcknowledgementRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project acknowledgement registration model instance should use the {@link ProjectAcknowledgementRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_acknowledgement_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "ACKNOWLEDGMENT_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "DETAILS", Types.VARCHAR },
			{ "DOCUMENT_NAME", Types.VARCHAR },
			{ "DOCUMENT_TYPE", Types.VARCHAR },
			{ "DOCUMENT", Types.BLOB },
			{ "VIDEO_TYPE", Types.VARCHAR },
			{ "VIDEO", Types.BLOB },
			{ "DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACKNOWLEDGMENT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DETAILS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOCUMENT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOCUMENT_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOCUMENT", Types.BLOB);
		TABLE_COLUMNS_MAP.put("VIDEO_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("VIDEO", Types.BLOB);
		TABLE_COLUMNS_MAP.put("DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_acknowledgement_details (uuid_ VARCHAR(75) null,ACKNOWLEDGMENT_ID LONG not null primary key,PROJECT_ID LONG,DETAILS TEXT null,DOCUMENT_NAME VARCHAR(75) null,DOCUMENT_TYPE VARCHAR(75) null,DOCUMENT BLOB,VIDEO_TYPE VARCHAR(75) null,VIDEO BLOB,DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cf_acknowledgement_details";
	public static final String ORDER_BY_JPQL = " ORDER BY projectAcknowledgementRegistration.ACKNOWLEDGMENT_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_acknowledgement_details.ACKNOWLEDGMENT_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.ProjectAcknowledgementRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.ProjectAcknowledgementRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.ProjectAcknowledgementRegistration"),
			true);
	public static final long PROJECT_ID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ACKNOWLEDGMENT_ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectAcknowledgementRegistration toModel(
		ProjectAcknowledgementRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectAcknowledgementRegistration model = new ProjectAcknowledgementRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setACKNOWLEDGMENT_ID(soapModel.getACKNOWLEDGMENT_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setDETAILS(soapModel.getDETAILS());
		model.setDOCUMENT_NAME(soapModel.getDOCUMENT_NAME());
		model.setDOCUMENT_TYPE(soapModel.getDOCUMENT_TYPE());
		model.setDOCUMENT(soapModel.getDOCUMENT());
		model.setVIDEO_TYPE(soapModel.getVIDEO_TYPE());
		model.setVIDEO(soapModel.getVIDEO());
		model.setDATE(soapModel.getDATE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectAcknowledgementRegistration> toModels(
		ProjectAcknowledgementRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectAcknowledgementRegistration> models = new ArrayList<ProjectAcknowledgementRegistration>(soapModels.length);

		for (ProjectAcknowledgementRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.ProjectAcknowledgementRegistration"));

	public ProjectAcknowledgementRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ACKNOWLEDGMENT_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setACKNOWLEDGMENT_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ACKNOWLEDGMENT_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectAcknowledgementRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectAcknowledgementRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("ACKNOWLEDGMENT_ID", getACKNOWLEDGMENT_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("DETAILS", getDETAILS());
		attributes.put("DOCUMENT_NAME", getDOCUMENT_NAME());
		attributes.put("DOCUMENT_TYPE", getDOCUMENT_TYPE());
		attributes.put("DOCUMENT", getDOCUMENT());
		attributes.put("VIDEO_TYPE", getVIDEO_TYPE());
		attributes.put("VIDEO", getVIDEO());
		attributes.put("DATE", getDATE());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long ACKNOWLEDGMENT_ID = (Long)attributes.get("ACKNOWLEDGMENT_ID");

		if (ACKNOWLEDGMENT_ID != null) {
			setACKNOWLEDGMENT_ID(ACKNOWLEDGMENT_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		String DETAILS = (String)attributes.get("DETAILS");

		if (DETAILS != null) {
			setDETAILS(DETAILS);
		}

		String DOCUMENT_NAME = (String)attributes.get("DOCUMENT_NAME");

		if (DOCUMENT_NAME != null) {
			setDOCUMENT_NAME(DOCUMENT_NAME);
		}

		String DOCUMENT_TYPE = (String)attributes.get("DOCUMENT_TYPE");

		if (DOCUMENT_TYPE != null) {
			setDOCUMENT_TYPE(DOCUMENT_TYPE);
		}

		Blob DOCUMENT = (Blob)attributes.get("DOCUMENT");

		if (DOCUMENT != null) {
			setDOCUMENT(DOCUMENT);
		}

		String VIDEO_TYPE = (String)attributes.get("VIDEO_TYPE");

		if (VIDEO_TYPE != null) {
			setVIDEO_TYPE(VIDEO_TYPE);
		}

		Blob VIDEO = (Blob)attributes.get("VIDEO");

		if (VIDEO != null) {
			setVIDEO(VIDEO);
		}

		Date DATE = (Date)attributes.get("DATE");

		if (DATE != null) {
			setDATE(DATE);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getACKNOWLEDGMENT_ID() {
		return _ACKNOWLEDGMENT_ID;
	}

	@Override
	public void setACKNOWLEDGMENT_ID(long ACKNOWLEDGMENT_ID) {
		_ACKNOWLEDGMENT_ID = ACKNOWLEDGMENT_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public String getDETAILS() {
		if (_DETAILS == null) {
			return "";
		}
		else {
			return _DETAILS;
		}
	}

	@Override
	public void setDETAILS(String DETAILS) {
		_DETAILS = DETAILS;
	}

	@JSON
	@Override
	public String getDOCUMENT_NAME() {
		if (_DOCUMENT_NAME == null) {
			return "";
		}
		else {
			return _DOCUMENT_NAME;
		}
	}

	@Override
	public void setDOCUMENT_NAME(String DOCUMENT_NAME) {
		_DOCUMENT_NAME = DOCUMENT_NAME;
	}

	@JSON
	@Override
	public String getDOCUMENT_TYPE() {
		if (_DOCUMENT_TYPE == null) {
			return "";
		}
		else {
			return _DOCUMENT_TYPE;
		}
	}

	@Override
	public void setDOCUMENT_TYPE(String DOCUMENT_TYPE) {
		_DOCUMENT_TYPE = DOCUMENT_TYPE;
	}

	@JSON
	@Override
	public Blob getDOCUMENT() {
		if (_DOCUMENTBlobModel == null) {
			try {
				_DOCUMENTBlobModel = ProjectAcknowledgementRegistrationLocalServiceUtil.getDOCUMENTBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_DOCUMENTBlobModel != null) {
			blob = _DOCUMENTBlobModel.getDOCUMENTBlob();
		}

		return blob;
	}

	@Override
	public void setDOCUMENT(Blob DOCUMENT) {
		if (_DOCUMENTBlobModel == null) {
			_DOCUMENTBlobModel = new ProjectAcknowledgementRegistrationDOCUMENTBlobModel(getPrimaryKey(),
					DOCUMENT);
		}
		else {
			_DOCUMENTBlobModel.setDOCUMENTBlob(DOCUMENT);
		}
	}

	@JSON
	@Override
	public String getVIDEO_TYPE() {
		if (_VIDEO_TYPE == null) {
			return "";
		}
		else {
			return _VIDEO_TYPE;
		}
	}

	@Override
	public void setVIDEO_TYPE(String VIDEO_TYPE) {
		_VIDEO_TYPE = VIDEO_TYPE;
	}

	@JSON
	@Override
	public Blob getVIDEO() {
		if (_VIDEOBlobModel == null) {
			try {
				_VIDEOBlobModel = ProjectAcknowledgementRegistrationLocalServiceUtil.getVIDEOBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_VIDEOBlobModel != null) {
			blob = _VIDEOBlobModel.getVIDEOBlob();
		}

		return blob;
	}

	@Override
	public void setVIDEO(Blob VIDEO) {
		if (_VIDEOBlobModel == null) {
			_VIDEOBlobModel = new ProjectAcknowledgementRegistrationVIDEOBlobModel(getPrimaryKey(),
					VIDEO);
		}
		else {
			_VIDEOBlobModel.setVIDEOBlob(VIDEO);
		}
	}

	@JSON
	@Override
	public Date getDATE() {
		return _DATE;
	}

	@Override
	public void setDATE(Date DATE) {
		_DATE = DATE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectAcknowledgementRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectAcknowledgementRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectAcknowledgementRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectAcknowledgementRegistrationImpl projectAcknowledgementRegistrationImpl =
			new ProjectAcknowledgementRegistrationImpl();

		projectAcknowledgementRegistrationImpl.setUuid(getUuid());
		projectAcknowledgementRegistrationImpl.setACKNOWLEDGMENT_ID(getACKNOWLEDGMENT_ID());
		projectAcknowledgementRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		projectAcknowledgementRegistrationImpl.setDETAILS(getDETAILS());
		projectAcknowledgementRegistrationImpl.setDOCUMENT_NAME(getDOCUMENT_NAME());
		projectAcknowledgementRegistrationImpl.setDOCUMENT_TYPE(getDOCUMENT_TYPE());
		projectAcknowledgementRegistrationImpl.setVIDEO_TYPE(getVIDEO_TYPE());
		projectAcknowledgementRegistrationImpl.setDATE(getDATE());

		projectAcknowledgementRegistrationImpl.resetOriginalValues();

		return projectAcknowledgementRegistrationImpl;
	}

	@Override
	public int compareTo(
		ProjectAcknowledgementRegistration projectAcknowledgementRegistration) {
		long primaryKey = projectAcknowledgementRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectAcknowledgementRegistration)) {
			return false;
		}

		ProjectAcknowledgementRegistration projectAcknowledgementRegistration = (ProjectAcknowledgementRegistration)obj;

		long primaryKey = projectAcknowledgementRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectAcknowledgementRegistrationModelImpl projectAcknowledgementRegistrationModelImpl =
			this;

		projectAcknowledgementRegistrationModelImpl._originalUuid = projectAcknowledgementRegistrationModelImpl._uuid;

		projectAcknowledgementRegistrationModelImpl._originalPROJECT_ID = projectAcknowledgementRegistrationModelImpl._PROJECT_ID;

		projectAcknowledgementRegistrationModelImpl._setOriginalPROJECT_ID = false;

		projectAcknowledgementRegistrationModelImpl._DOCUMENTBlobModel = null;

		projectAcknowledgementRegistrationModelImpl._VIDEOBlobModel = null;

		projectAcknowledgementRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectAcknowledgementRegistration> toCacheModel() {
		ProjectAcknowledgementRegistrationCacheModel projectAcknowledgementRegistrationCacheModel =
			new ProjectAcknowledgementRegistrationCacheModel();

		projectAcknowledgementRegistrationCacheModel.uuid = getUuid();

		String uuid = projectAcknowledgementRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectAcknowledgementRegistrationCacheModel.uuid = null;
		}

		projectAcknowledgementRegistrationCacheModel.ACKNOWLEDGMENT_ID = getACKNOWLEDGMENT_ID();

		projectAcknowledgementRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		projectAcknowledgementRegistrationCacheModel.DETAILS = getDETAILS();

		String DETAILS = projectAcknowledgementRegistrationCacheModel.DETAILS;

		if ((DETAILS != null) && (DETAILS.length() == 0)) {
			projectAcknowledgementRegistrationCacheModel.DETAILS = null;
		}

		projectAcknowledgementRegistrationCacheModel.DOCUMENT_NAME = getDOCUMENT_NAME();

		String DOCUMENT_NAME = projectAcknowledgementRegistrationCacheModel.DOCUMENT_NAME;

		if ((DOCUMENT_NAME != null) && (DOCUMENT_NAME.length() == 0)) {
			projectAcknowledgementRegistrationCacheModel.DOCUMENT_NAME = null;
		}

		projectAcknowledgementRegistrationCacheModel.DOCUMENT_TYPE = getDOCUMENT_TYPE();

		String DOCUMENT_TYPE = projectAcknowledgementRegistrationCacheModel.DOCUMENT_TYPE;

		if ((DOCUMENT_TYPE != null) && (DOCUMENT_TYPE.length() == 0)) {
			projectAcknowledgementRegistrationCacheModel.DOCUMENT_TYPE = null;
		}

		projectAcknowledgementRegistrationCacheModel.VIDEO_TYPE = getVIDEO_TYPE();

		String VIDEO_TYPE = projectAcknowledgementRegistrationCacheModel.VIDEO_TYPE;

		if ((VIDEO_TYPE != null) && (VIDEO_TYPE.length() == 0)) {
			projectAcknowledgementRegistrationCacheModel.VIDEO_TYPE = null;
		}

		Date DATE = getDATE();

		if (DATE != null) {
			projectAcknowledgementRegistrationCacheModel.DATE = DATE.getTime();
		}
		else {
			projectAcknowledgementRegistrationCacheModel.DATE = Long.MIN_VALUE;
		}

		return projectAcknowledgementRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", ACKNOWLEDGMENT_ID=");
		sb.append(getACKNOWLEDGMENT_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", DETAILS=");
		sb.append(getDETAILS());
		sb.append(", DOCUMENT_NAME=");
		sb.append(getDOCUMENT_NAME());
		sb.append(", DOCUMENT_TYPE=");
		sb.append(getDOCUMENT_TYPE());
		sb.append(", VIDEO_TYPE=");
		sb.append(getVIDEO_TYPE());
		sb.append(", DATE=");
		sb.append(getDATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"com.crowd.funding.database.model.ProjectAcknowledgementRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACKNOWLEDGMENT_ID</column-name><column-value><![CDATA[");
		sb.append(getACKNOWLEDGMENT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DETAILS</column-name><column-value><![CDATA[");
		sb.append(getDETAILS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DOCUMENT_NAME</column-name><column-value><![CDATA[");
		sb.append(getDOCUMENT_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DOCUMENT_TYPE</column-name><column-value><![CDATA[");
		sb.append(getDOCUMENT_TYPE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>VIDEO_TYPE</column-name><column-value><![CDATA[");
		sb.append(getVIDEO_TYPE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DATE</column-name><column-value><![CDATA[");
		sb.append(getDATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectAcknowledgementRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectAcknowledgementRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _ACKNOWLEDGMENT_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private String _DETAILS;
	private String _DOCUMENT_NAME;
	private String _DOCUMENT_TYPE;
	private ProjectAcknowledgementRegistrationDOCUMENTBlobModel _DOCUMENTBlobModel;
	private String _VIDEO_TYPE;
	private ProjectAcknowledgementRegistrationVIDEOBlobModel _VIDEOBlobModel;
	private Date _DATE;
	private long _columnBitmask;
	private ProjectAcknowledgementRegistration _escapedModel;
}