/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.CandidateRegistration;
import com.crowd.funding.database.model.CandidateRegistrationModel;
import com.crowd.funding.database.model.CandidateRegistrationRESUMEBlobModel;
import com.crowd.funding.database.model.CandidateRegistrationSoap;
import com.crowd.funding.database.service.CandidateRegistrationLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CandidateRegistration service. Represents a row in the &quot;cf_candidate_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CandidateRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CandidateRegistrationImpl
 * @see CandidateRegistration
 * @see CandidateRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CandidateRegistrationModelImpl extends BaseModelImpl<CandidateRegistration>
	implements CandidateRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate registration model instance should use the {@link CandidateRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_candidate_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "CANDIDATE_ID", Types.BIGINT },
			{ "POSITION_ID", Types.BIGINT },
			{ "NAME", Types.VARCHAR },
			{ "EMAIL", Types.VARCHAR },
			{ "MOBILE_NO", Types.BIGINT },
			{ "CURRENT_LOCATION", Types.VARCHAR },
			{ "EXPERIENCE", Types.VARCHAR },
			{ "RESUME", Types.BLOB },
			{ "DATE", Types.TIMESTAMP },
			{ "STATUS", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CANDIDATE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("POSITION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MOBILE_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CURRENT_LOCATION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EXPERIENCE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RESUME", Types.BLOB);
		TABLE_COLUMNS_MAP.put("DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_candidate_details (uuid_ VARCHAR(75) null,CANDIDATE_ID LONG not null primary key,POSITION_ID LONG,NAME VARCHAR(75) null,EMAIL VARCHAR(75) null,MOBILE_NO LONG,CURRENT_LOCATION VARCHAR(75) null,EXPERIENCE VARCHAR(75) null,RESUME BLOB,DATE DATE null,STATUS INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cf_candidate_details";
	public static final String ORDER_BY_JPQL = " ORDER BY candidateRegistration.CANDIDATE_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_candidate_details.CANDIDATE_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.CandidateRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.CandidateRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.CandidateRegistration"),
			true);
	public static final long CANDIDATE_ID_COLUMN_BITMASK = 1L;
	public static final long POSITION_ID_COLUMN_BITMASK = 2L;
	public static final long STATUS_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CandidateRegistration toModel(
		CandidateRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CandidateRegistration model = new CandidateRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setCANDIDATE_ID(soapModel.getCANDIDATE_ID());
		model.setPOSITION_ID(soapModel.getPOSITION_ID());
		model.setNAME(soapModel.getNAME());
		model.setEMAIL(soapModel.getEMAIL());
		model.setMOBILE_NO(soapModel.getMOBILE_NO());
		model.setCURRENT_LOCATION(soapModel.getCURRENT_LOCATION());
		model.setEXPERIENCE(soapModel.getEXPERIENCE());
		model.setRESUME(soapModel.getRESUME());
		model.setDATE(soapModel.getDATE());
		model.setSTATUS(soapModel.getSTATUS());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CandidateRegistration> toModels(
		CandidateRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CandidateRegistration> models = new ArrayList<CandidateRegistration>(soapModels.length);

		for (CandidateRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.CandidateRegistration"));

	public CandidateRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CANDIDATE_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCANDIDATE_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CANDIDATE_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CandidateRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return CandidateRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("CANDIDATE_ID", getCANDIDATE_ID());
		attributes.put("POSITION_ID", getPOSITION_ID());
		attributes.put("NAME", getNAME());
		attributes.put("EMAIL", getEMAIL());
		attributes.put("MOBILE_NO", getMOBILE_NO());
		attributes.put("CURRENT_LOCATION", getCURRENT_LOCATION());
		attributes.put("EXPERIENCE", getEXPERIENCE());
		attributes.put("RESUME", getRESUME());
		attributes.put("DATE", getDATE());
		attributes.put("STATUS", getSTATUS());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long CANDIDATE_ID = (Long)attributes.get("CANDIDATE_ID");

		if (CANDIDATE_ID != null) {
			setCANDIDATE_ID(CANDIDATE_ID);
		}

		Long POSITION_ID = (Long)attributes.get("POSITION_ID");

		if (POSITION_ID != null) {
			setPOSITION_ID(POSITION_ID);
		}

		String NAME = (String)attributes.get("NAME");

		if (NAME != null) {
			setNAME(NAME);
		}

		String EMAIL = (String)attributes.get("EMAIL");

		if (EMAIL != null) {
			setEMAIL(EMAIL);
		}

		Long MOBILE_NO = (Long)attributes.get("MOBILE_NO");

		if (MOBILE_NO != null) {
			setMOBILE_NO(MOBILE_NO);
		}

		String CURRENT_LOCATION = (String)attributes.get("CURRENT_LOCATION");

		if (CURRENT_LOCATION != null) {
			setCURRENT_LOCATION(CURRENT_LOCATION);
		}

		String EXPERIENCE = (String)attributes.get("EXPERIENCE");

		if (EXPERIENCE != null) {
			setEXPERIENCE(EXPERIENCE);
		}

		Blob RESUME = (Blob)attributes.get("RESUME");

		if (RESUME != null) {
			setRESUME(RESUME);
		}

		Date DATE = (Date)attributes.get("DATE");

		if (DATE != null) {
			setDATE(DATE);
		}

		Integer STATUS = (Integer)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCANDIDATE_ID() {
		return _CANDIDATE_ID;
	}

	@Override
	public void setCANDIDATE_ID(long CANDIDATE_ID) {
		_columnBitmask |= CANDIDATE_ID_COLUMN_BITMASK;

		if (!_setOriginalCANDIDATE_ID) {
			_setOriginalCANDIDATE_ID = true;

			_originalCANDIDATE_ID = _CANDIDATE_ID;
		}

		_CANDIDATE_ID = CANDIDATE_ID;
	}

	public long getOriginalCANDIDATE_ID() {
		return _originalCANDIDATE_ID;
	}

	@JSON
	@Override
	public long getPOSITION_ID() {
		return _POSITION_ID;
	}

	@Override
	public void setPOSITION_ID(long POSITION_ID) {
		_columnBitmask |= POSITION_ID_COLUMN_BITMASK;

		if (!_setOriginalPOSITION_ID) {
			_setOriginalPOSITION_ID = true;

			_originalPOSITION_ID = _POSITION_ID;
		}

		_POSITION_ID = POSITION_ID;
	}

	public long getOriginalPOSITION_ID() {
		return _originalPOSITION_ID;
	}

	@JSON
	@Override
	public String getNAME() {
		if (_NAME == null) {
			return "";
		}
		else {
			return _NAME;
		}
	}

	@Override
	public void setNAME(String NAME) {
		_NAME = NAME;
	}

	@JSON
	@Override
	public String getEMAIL() {
		if (_EMAIL == null) {
			return "";
		}
		else {
			return _EMAIL;
		}
	}

	@Override
	public void setEMAIL(String EMAIL) {
		_EMAIL = EMAIL;
	}

	@JSON
	@Override
	public long getMOBILE_NO() {
		return _MOBILE_NO;
	}

	@Override
	public void setMOBILE_NO(long MOBILE_NO) {
		_MOBILE_NO = MOBILE_NO;
	}

	@JSON
	@Override
	public String getCURRENT_LOCATION() {
		if (_CURRENT_LOCATION == null) {
			return "";
		}
		else {
			return _CURRENT_LOCATION;
		}
	}

	@Override
	public void setCURRENT_LOCATION(String CURRENT_LOCATION) {
		_CURRENT_LOCATION = CURRENT_LOCATION;
	}

	@JSON
	@Override
	public String getEXPERIENCE() {
		if (_EXPERIENCE == null) {
			return "";
		}
		else {
			return _EXPERIENCE;
		}
	}

	@Override
	public void setEXPERIENCE(String EXPERIENCE) {
		_EXPERIENCE = EXPERIENCE;
	}

	@JSON
	@Override
	public Blob getRESUME() {
		if (_RESUMEBlobModel == null) {
			try {
				_RESUMEBlobModel = CandidateRegistrationLocalServiceUtil.getRESUMEBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_RESUMEBlobModel != null) {
			blob = _RESUMEBlobModel.getRESUMEBlob();
		}

		return blob;
	}

	@Override
	public void setRESUME(Blob RESUME) {
		if (_RESUMEBlobModel == null) {
			_RESUMEBlobModel = new CandidateRegistrationRESUMEBlobModel(getPrimaryKey(),
					RESUME);
		}
		else {
			_RESUMEBlobModel.setRESUMEBlob(RESUME);
		}
	}

	@JSON
	@Override
	public Date getDATE() {
		return _DATE;
	}

	@Override
	public void setDATE(Date DATE) {
		_DATE = DATE;
	}

	@JSON
	@Override
	public int getSTATUS() {
		return _STATUS;
	}

	@Override
	public void setSTATUS(int STATUS) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalSTATUS) {
			_setOriginalSTATUS = true;

			_originalSTATUS = _STATUS;
		}

		_STATUS = STATUS;
	}

	public int getOriginalSTATUS() {
		return _originalSTATUS;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CandidateRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CandidateRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CandidateRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateRegistrationImpl candidateRegistrationImpl = new CandidateRegistrationImpl();

		candidateRegistrationImpl.setUuid(getUuid());
		candidateRegistrationImpl.setCANDIDATE_ID(getCANDIDATE_ID());
		candidateRegistrationImpl.setPOSITION_ID(getPOSITION_ID());
		candidateRegistrationImpl.setNAME(getNAME());
		candidateRegistrationImpl.setEMAIL(getEMAIL());
		candidateRegistrationImpl.setMOBILE_NO(getMOBILE_NO());
		candidateRegistrationImpl.setCURRENT_LOCATION(getCURRENT_LOCATION());
		candidateRegistrationImpl.setEXPERIENCE(getEXPERIENCE());
		candidateRegistrationImpl.setDATE(getDATE());
		candidateRegistrationImpl.setSTATUS(getSTATUS());

		candidateRegistrationImpl.resetOriginalValues();

		return candidateRegistrationImpl;
	}

	@Override
	public int compareTo(CandidateRegistration candidateRegistration) {
		long primaryKey = candidateRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CandidateRegistration)) {
			return false;
		}

		CandidateRegistration candidateRegistration = (CandidateRegistration)obj;

		long primaryKey = candidateRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CandidateRegistrationModelImpl candidateRegistrationModelImpl = this;

		candidateRegistrationModelImpl._originalUuid = candidateRegistrationModelImpl._uuid;

		candidateRegistrationModelImpl._originalCANDIDATE_ID = candidateRegistrationModelImpl._CANDIDATE_ID;

		candidateRegistrationModelImpl._setOriginalCANDIDATE_ID = false;

		candidateRegistrationModelImpl._originalPOSITION_ID = candidateRegistrationModelImpl._POSITION_ID;

		candidateRegistrationModelImpl._setOriginalPOSITION_ID = false;

		candidateRegistrationModelImpl._RESUMEBlobModel = null;

		candidateRegistrationModelImpl._originalSTATUS = candidateRegistrationModelImpl._STATUS;

		candidateRegistrationModelImpl._setOriginalSTATUS = false;

		candidateRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CandidateRegistration> toCacheModel() {
		CandidateRegistrationCacheModel candidateRegistrationCacheModel = new CandidateRegistrationCacheModel();

		candidateRegistrationCacheModel.uuid = getUuid();

		String uuid = candidateRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			candidateRegistrationCacheModel.uuid = null;
		}

		candidateRegistrationCacheModel.CANDIDATE_ID = getCANDIDATE_ID();

		candidateRegistrationCacheModel.POSITION_ID = getPOSITION_ID();

		candidateRegistrationCacheModel.NAME = getNAME();

		String NAME = candidateRegistrationCacheModel.NAME;

		if ((NAME != null) && (NAME.length() == 0)) {
			candidateRegistrationCacheModel.NAME = null;
		}

		candidateRegistrationCacheModel.EMAIL = getEMAIL();

		String EMAIL = candidateRegistrationCacheModel.EMAIL;

		if ((EMAIL != null) && (EMAIL.length() == 0)) {
			candidateRegistrationCacheModel.EMAIL = null;
		}

		candidateRegistrationCacheModel.MOBILE_NO = getMOBILE_NO();

		candidateRegistrationCacheModel.CURRENT_LOCATION = getCURRENT_LOCATION();

		String CURRENT_LOCATION = candidateRegistrationCacheModel.CURRENT_LOCATION;

		if ((CURRENT_LOCATION != null) && (CURRENT_LOCATION.length() == 0)) {
			candidateRegistrationCacheModel.CURRENT_LOCATION = null;
		}

		candidateRegistrationCacheModel.EXPERIENCE = getEXPERIENCE();

		String EXPERIENCE = candidateRegistrationCacheModel.EXPERIENCE;

		if ((EXPERIENCE != null) && (EXPERIENCE.length() == 0)) {
			candidateRegistrationCacheModel.EXPERIENCE = null;
		}

		Date DATE = getDATE();

		if (DATE != null) {
			candidateRegistrationCacheModel.DATE = DATE.getTime();
		}
		else {
			candidateRegistrationCacheModel.DATE = Long.MIN_VALUE;
		}

		candidateRegistrationCacheModel.STATUS = getSTATUS();

		return candidateRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", CANDIDATE_ID=");
		sb.append(getCANDIDATE_ID());
		sb.append(", POSITION_ID=");
		sb.append(getPOSITION_ID());
		sb.append(", NAME=");
		sb.append(getNAME());
		sb.append(", EMAIL=");
		sb.append(getEMAIL());
		sb.append(", MOBILE_NO=");
		sb.append(getMOBILE_NO());
		sb.append(", CURRENT_LOCATION=");
		sb.append(getCURRENT_LOCATION());
		sb.append(", EXPERIENCE=");
		sb.append(getEXPERIENCE());
		sb.append(", DATE=");
		sb.append(getDATE());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.CandidateRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CANDIDATE_ID</column-name><column-value><![CDATA[");
		sb.append(getCANDIDATE_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>POSITION_ID</column-name><column-value><![CDATA[");
		sb.append(getPOSITION_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>NAME</column-name><column-value><![CDATA[");
		sb.append(getNAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EMAIL</column-name><column-value><![CDATA[");
		sb.append(getEMAIL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MOBILE_NO</column-name><column-value><![CDATA[");
		sb.append(getMOBILE_NO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CURRENT_LOCATION</column-name><column-value><![CDATA[");
		sb.append(getCURRENT_LOCATION());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EXPERIENCE</column-name><column-value><![CDATA[");
		sb.append(getEXPERIENCE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DATE</column-name><column-value><![CDATA[");
		sb.append(getDATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CandidateRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CandidateRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _CANDIDATE_ID;
	private long _originalCANDIDATE_ID;
	private boolean _setOriginalCANDIDATE_ID;
	private long _POSITION_ID;
	private long _originalPOSITION_ID;
	private boolean _setOriginalPOSITION_ID;
	private String _NAME;
	private String _EMAIL;
	private long _MOBILE_NO;
	private String _CURRENT_LOCATION;
	private String _EXPERIENCE;
	private CandidateRegistrationRESUMEBlobModel _RESUMEBlobModel;
	private Date _DATE;
	private int _STATUS;
	private int _originalSTATUS;
	private boolean _setOriginalSTATUS;
	private long _columnBitmask;
	private CandidateRegistration _escapedModel;
}