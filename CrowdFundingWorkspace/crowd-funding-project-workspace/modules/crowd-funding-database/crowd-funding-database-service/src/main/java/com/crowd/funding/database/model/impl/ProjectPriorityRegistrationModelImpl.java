/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.ProjectPriorityRegistration;
import com.crowd.funding.database.model.ProjectPriorityRegistrationModel;
import com.crowd.funding.database.model.ProjectPriorityRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectPriorityRegistration service. Represents a row in the &quot;cf_project_priority_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectPriorityRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectPriorityRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectPriorityRegistrationImpl
 * @see ProjectPriorityRegistration
 * @see ProjectPriorityRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectPriorityRegistrationModelImpl extends BaseModelImpl<ProjectPriorityRegistration>
	implements ProjectPriorityRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project priority registration model instance should use the {@link ProjectPriorityRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_priority_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_PRIORITY_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "PRIORITY", Types.INTEGER },
			{ "PRIORITY_SEQUANCE", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_PRIORITY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PRIORITY", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PRIORITY_SEQUANCE", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_priority_details (uuid_ VARCHAR(75) null,PROJECT_PRIORITY_ID LONG not null primary key,PROJECT_ID LONG,PRIORITY INTEGER,PRIORITY_SEQUANCE INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_priority_details";
	public static final String ORDER_BY_JPQL = " ORDER BY projectPriorityRegistration.PROJECT_PRIORITY_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_priority_details.PROJECT_PRIORITY_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.ProjectPriorityRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.ProjectPriorityRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.ProjectPriorityRegistration"),
			true);
	public static final long PRIORITY_COLUMN_BITMASK = 1L;
	public static final long PRIORITY_SEQUANCE_COLUMN_BITMASK = 2L;
	public static final long PROJECT_ID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long PROJECT_PRIORITY_ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectPriorityRegistration toModel(
		ProjectPriorityRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectPriorityRegistration model = new ProjectPriorityRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_PRIORITY_ID(soapModel.getPROJECT_PRIORITY_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setPRIORITY(soapModel.getPRIORITY());
		model.setPRIORITY_SEQUANCE(soapModel.getPRIORITY_SEQUANCE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectPriorityRegistration> toModels(
		ProjectPriorityRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectPriorityRegistration> models = new ArrayList<ProjectPriorityRegistration>(soapModels.length);

		for (ProjectPriorityRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.ProjectPriorityRegistration"));

	public ProjectPriorityRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_PRIORITY_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_PRIORITY_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_PRIORITY_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectPriorityRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectPriorityRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_PRIORITY_ID", getPROJECT_PRIORITY_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("PRIORITY", getPRIORITY());
		attributes.put("PRIORITY_SEQUANCE", getPRIORITY_SEQUANCE());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_PRIORITY_ID = (Long)attributes.get("PROJECT_PRIORITY_ID");

		if (PROJECT_PRIORITY_ID != null) {
			setPROJECT_PRIORITY_ID(PROJECT_PRIORITY_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		Integer PRIORITY = (Integer)attributes.get("PRIORITY");

		if (PRIORITY != null) {
			setPRIORITY(PRIORITY);
		}

		Integer PRIORITY_SEQUANCE = (Integer)attributes.get("PRIORITY_SEQUANCE");

		if (PRIORITY_SEQUANCE != null) {
			setPRIORITY_SEQUANCE(PRIORITY_SEQUANCE);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_PRIORITY_ID() {
		return _PROJECT_PRIORITY_ID;
	}

	@Override
	public void setPROJECT_PRIORITY_ID(long PROJECT_PRIORITY_ID) {
		_PROJECT_PRIORITY_ID = PROJECT_PRIORITY_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public int getPRIORITY() {
		return _PRIORITY;
	}

	@Override
	public void setPRIORITY(int PRIORITY) {
		_columnBitmask |= PRIORITY_COLUMN_BITMASK;

		if (!_setOriginalPRIORITY) {
			_setOriginalPRIORITY = true;

			_originalPRIORITY = _PRIORITY;
		}

		_PRIORITY = PRIORITY;
	}

	public int getOriginalPRIORITY() {
		return _originalPRIORITY;
	}

	@JSON
	@Override
	public int getPRIORITY_SEQUANCE() {
		return _PRIORITY_SEQUANCE;
	}

	@Override
	public void setPRIORITY_SEQUANCE(int PRIORITY_SEQUANCE) {
		_columnBitmask |= PRIORITY_SEQUANCE_COLUMN_BITMASK;

		if (!_setOriginalPRIORITY_SEQUANCE) {
			_setOriginalPRIORITY_SEQUANCE = true;

			_originalPRIORITY_SEQUANCE = _PRIORITY_SEQUANCE;
		}

		_PRIORITY_SEQUANCE = PRIORITY_SEQUANCE;
	}

	public int getOriginalPRIORITY_SEQUANCE() {
		return _originalPRIORITY_SEQUANCE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectPriorityRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectPriorityRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectPriorityRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectPriorityRegistrationImpl projectPriorityRegistrationImpl = new ProjectPriorityRegistrationImpl();

		projectPriorityRegistrationImpl.setUuid(getUuid());
		projectPriorityRegistrationImpl.setPROJECT_PRIORITY_ID(getPROJECT_PRIORITY_ID());
		projectPriorityRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		projectPriorityRegistrationImpl.setPRIORITY(getPRIORITY());
		projectPriorityRegistrationImpl.setPRIORITY_SEQUANCE(getPRIORITY_SEQUANCE());

		projectPriorityRegistrationImpl.resetOriginalValues();

		return projectPriorityRegistrationImpl;
	}

	@Override
	public int compareTo(
		ProjectPriorityRegistration projectPriorityRegistration) {
		long primaryKey = projectPriorityRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectPriorityRegistration)) {
			return false;
		}

		ProjectPriorityRegistration projectPriorityRegistration = (ProjectPriorityRegistration)obj;

		long primaryKey = projectPriorityRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectPriorityRegistrationModelImpl projectPriorityRegistrationModelImpl =
			this;

		projectPriorityRegistrationModelImpl._originalUuid = projectPriorityRegistrationModelImpl._uuid;

		projectPriorityRegistrationModelImpl._originalPROJECT_ID = projectPriorityRegistrationModelImpl._PROJECT_ID;

		projectPriorityRegistrationModelImpl._setOriginalPROJECT_ID = false;

		projectPriorityRegistrationModelImpl._originalPRIORITY = projectPriorityRegistrationModelImpl._PRIORITY;

		projectPriorityRegistrationModelImpl._setOriginalPRIORITY = false;

		projectPriorityRegistrationModelImpl._originalPRIORITY_SEQUANCE = projectPriorityRegistrationModelImpl._PRIORITY_SEQUANCE;

		projectPriorityRegistrationModelImpl._setOriginalPRIORITY_SEQUANCE = false;

		projectPriorityRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectPriorityRegistration> toCacheModel() {
		ProjectPriorityRegistrationCacheModel projectPriorityRegistrationCacheModel =
			new ProjectPriorityRegistrationCacheModel();

		projectPriorityRegistrationCacheModel.uuid = getUuid();

		String uuid = projectPriorityRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectPriorityRegistrationCacheModel.uuid = null;
		}

		projectPriorityRegistrationCacheModel.PROJECT_PRIORITY_ID = getPROJECT_PRIORITY_ID();

		projectPriorityRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		projectPriorityRegistrationCacheModel.PRIORITY = getPRIORITY();

		projectPriorityRegistrationCacheModel.PRIORITY_SEQUANCE = getPRIORITY_SEQUANCE();

		return projectPriorityRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_PRIORITY_ID=");
		sb.append(getPROJECT_PRIORITY_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", PRIORITY=");
		sb.append(getPRIORITY());
		sb.append(", PRIORITY_SEQUANCE=");
		sb.append(getPRIORITY_SEQUANCE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"com.crowd.funding.database.model.ProjectPriorityRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_PRIORITY_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_PRIORITY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PRIORITY</column-name><column-value><![CDATA[");
		sb.append(getPRIORITY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PRIORITY_SEQUANCE</column-name><column-value><![CDATA[");
		sb.append(getPRIORITY_SEQUANCE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectPriorityRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectPriorityRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_PRIORITY_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private int _PRIORITY;
	private int _originalPRIORITY;
	private boolean _setOriginalPRIORITY;
	private int _PRIORITY_SEQUANCE;
	private int _originalPRIORITY_SEQUANCE;
	private boolean _setOriginalPRIORITY_SEQUANCE;
	private long _columnBitmask;
	private ProjectPriorityRegistration _escapedModel;
}