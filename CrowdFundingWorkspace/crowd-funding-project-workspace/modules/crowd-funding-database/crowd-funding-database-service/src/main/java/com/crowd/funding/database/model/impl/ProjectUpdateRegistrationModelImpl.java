/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.ProjectUpdateRegistration;
import com.crowd.funding.database.model.ProjectUpdateRegistrationModel;
import com.crowd.funding.database.model.ProjectUpdateRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectUpdateRegistration service. Represents a row in the &quot;cf_project_update_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectUpdateRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectUpdateRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectUpdateRegistrationImpl
 * @see ProjectUpdateRegistration
 * @see ProjectUpdateRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectUpdateRegistrationModelImpl extends BaseModelImpl<ProjectUpdateRegistration>
	implements ProjectUpdateRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project update registration model instance should use the {@link ProjectUpdateRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_update_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_UPDATE_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "UPDATE_DETAILS", Types.VARCHAR },
			{ "UPDATE_DATE", Types.TIMESTAMP },
			{ "STATUS", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_UPDATE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("UPDATE_DETAILS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UPDATE_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_update_details (uuid_ VARCHAR(75) null,PROJECT_UPDATE_ID LONG not null primary key,PROJECT_ID LONG,UPDATE_DETAILS TEXT null,UPDATE_DATE DATE null,STATUS INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_update_details";
	public static final String ORDER_BY_JPQL = " ORDER BY projectUpdateRegistration.PROJECT_UPDATE_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_update_details.PROJECT_UPDATE_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.ProjectUpdateRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.ProjectUpdateRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.ProjectUpdateRegistration"),
			true);
	public static final long PROJECT_ID_COLUMN_BITMASK = 1L;
	public static final long PROJECT_UPDATE_ID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectUpdateRegistration toModel(
		ProjectUpdateRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectUpdateRegistration model = new ProjectUpdateRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_UPDATE_ID(soapModel.getPROJECT_UPDATE_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setUPDATE_DETAILS(soapModel.getUPDATE_DETAILS());
		model.setUPDATE_DATE(soapModel.getUPDATE_DATE());
		model.setSTATUS(soapModel.getSTATUS());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectUpdateRegistration> toModels(
		ProjectUpdateRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectUpdateRegistration> models = new ArrayList<ProjectUpdateRegistration>(soapModels.length);

		for (ProjectUpdateRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.ProjectUpdateRegistration"));

	public ProjectUpdateRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_UPDATE_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_UPDATE_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_UPDATE_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectUpdateRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectUpdateRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_UPDATE_ID", getPROJECT_UPDATE_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("UPDATE_DETAILS", getUPDATE_DETAILS());
		attributes.put("UPDATE_DATE", getUPDATE_DATE());
		attributes.put("STATUS", getSTATUS());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_UPDATE_ID = (Long)attributes.get("PROJECT_UPDATE_ID");

		if (PROJECT_UPDATE_ID != null) {
			setPROJECT_UPDATE_ID(PROJECT_UPDATE_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		String UPDATE_DETAILS = (String)attributes.get("UPDATE_DETAILS");

		if (UPDATE_DETAILS != null) {
			setUPDATE_DETAILS(UPDATE_DETAILS);
		}

		Date UPDATE_DATE = (Date)attributes.get("UPDATE_DATE");

		if (UPDATE_DATE != null) {
			setUPDATE_DATE(UPDATE_DATE);
		}

		Integer STATUS = (Integer)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_UPDATE_ID() {
		return _PROJECT_UPDATE_ID;
	}

	@Override
	public void setPROJECT_UPDATE_ID(long PROJECT_UPDATE_ID) {
		_columnBitmask |= PROJECT_UPDATE_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_UPDATE_ID) {
			_setOriginalPROJECT_UPDATE_ID = true;

			_originalPROJECT_UPDATE_ID = _PROJECT_UPDATE_ID;
		}

		_PROJECT_UPDATE_ID = PROJECT_UPDATE_ID;
	}

	public long getOriginalPROJECT_UPDATE_ID() {
		return _originalPROJECT_UPDATE_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public String getUPDATE_DETAILS() {
		if (_UPDATE_DETAILS == null) {
			return "";
		}
		else {
			return _UPDATE_DETAILS;
		}
	}

	@Override
	public void setUPDATE_DETAILS(String UPDATE_DETAILS) {
		_UPDATE_DETAILS = UPDATE_DETAILS;
	}

	@JSON
	@Override
	public Date getUPDATE_DATE() {
		return _UPDATE_DATE;
	}

	@Override
	public void setUPDATE_DATE(Date UPDATE_DATE) {
		_UPDATE_DATE = UPDATE_DATE;
	}

	@JSON
	@Override
	public int getSTATUS() {
		return _STATUS;
	}

	@Override
	public void setSTATUS(int STATUS) {
		_STATUS = STATUS;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectUpdateRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectUpdateRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectUpdateRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectUpdateRegistrationImpl projectUpdateRegistrationImpl = new ProjectUpdateRegistrationImpl();

		projectUpdateRegistrationImpl.setUuid(getUuid());
		projectUpdateRegistrationImpl.setPROJECT_UPDATE_ID(getPROJECT_UPDATE_ID());
		projectUpdateRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		projectUpdateRegistrationImpl.setUPDATE_DETAILS(getUPDATE_DETAILS());
		projectUpdateRegistrationImpl.setUPDATE_DATE(getUPDATE_DATE());
		projectUpdateRegistrationImpl.setSTATUS(getSTATUS());

		projectUpdateRegistrationImpl.resetOriginalValues();

		return projectUpdateRegistrationImpl;
	}

	@Override
	public int compareTo(ProjectUpdateRegistration projectUpdateRegistration) {
		long primaryKey = projectUpdateRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectUpdateRegistration)) {
			return false;
		}

		ProjectUpdateRegistration projectUpdateRegistration = (ProjectUpdateRegistration)obj;

		long primaryKey = projectUpdateRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectUpdateRegistrationModelImpl projectUpdateRegistrationModelImpl = this;

		projectUpdateRegistrationModelImpl._originalUuid = projectUpdateRegistrationModelImpl._uuid;

		projectUpdateRegistrationModelImpl._originalPROJECT_UPDATE_ID = projectUpdateRegistrationModelImpl._PROJECT_UPDATE_ID;

		projectUpdateRegistrationModelImpl._setOriginalPROJECT_UPDATE_ID = false;

		projectUpdateRegistrationModelImpl._originalPROJECT_ID = projectUpdateRegistrationModelImpl._PROJECT_ID;

		projectUpdateRegistrationModelImpl._setOriginalPROJECT_ID = false;

		projectUpdateRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectUpdateRegistration> toCacheModel() {
		ProjectUpdateRegistrationCacheModel projectUpdateRegistrationCacheModel = new ProjectUpdateRegistrationCacheModel();

		projectUpdateRegistrationCacheModel.uuid = getUuid();

		String uuid = projectUpdateRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectUpdateRegistrationCacheModel.uuid = null;
		}

		projectUpdateRegistrationCacheModel.PROJECT_UPDATE_ID = getPROJECT_UPDATE_ID();

		projectUpdateRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		projectUpdateRegistrationCacheModel.UPDATE_DETAILS = getUPDATE_DETAILS();

		String UPDATE_DETAILS = projectUpdateRegistrationCacheModel.UPDATE_DETAILS;

		if ((UPDATE_DETAILS != null) && (UPDATE_DETAILS.length() == 0)) {
			projectUpdateRegistrationCacheModel.UPDATE_DETAILS = null;
		}

		Date UPDATE_DATE = getUPDATE_DATE();

		if (UPDATE_DATE != null) {
			projectUpdateRegistrationCacheModel.UPDATE_DATE = UPDATE_DATE.getTime();
		}
		else {
			projectUpdateRegistrationCacheModel.UPDATE_DATE = Long.MIN_VALUE;
		}

		projectUpdateRegistrationCacheModel.STATUS = getSTATUS();

		return projectUpdateRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_UPDATE_ID=");
		sb.append(getPROJECT_UPDATE_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", UPDATE_DETAILS=");
		sb.append(getUPDATE_DETAILS());
		sb.append(", UPDATE_DATE=");
		sb.append(getUPDATE_DATE());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.ProjectUpdateRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_UPDATE_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_UPDATE_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATE_DETAILS</column-name><column-value><![CDATA[");
		sb.append(getUPDATE_DETAILS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPDATE_DATE</column-name><column-value><![CDATA[");
		sb.append(getUPDATE_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectUpdateRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectUpdateRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_UPDATE_ID;
	private long _originalPROJECT_UPDATE_ID;
	private boolean _setOriginalPROJECT_UPDATE_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private String _UPDATE_DETAILS;
	private Date _UPDATE_DATE;
	private int _STATUS;
	private long _columnBitmask;
	private ProjectUpdateRegistration _escapedModel;
}