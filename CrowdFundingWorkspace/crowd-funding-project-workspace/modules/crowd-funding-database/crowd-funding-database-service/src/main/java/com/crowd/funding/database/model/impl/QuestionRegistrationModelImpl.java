/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.QuestionRegistration;
import com.crowd.funding.database.model.QuestionRegistrationModel;
import com.crowd.funding.database.model.QuestionRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the QuestionRegistration service. Represents a row in the &quot;cf_project_question_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link QuestionRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuestionRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see QuestionRegistrationImpl
 * @see QuestionRegistration
 * @see QuestionRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class QuestionRegistrationModelImpl extends BaseModelImpl<QuestionRegistration>
	implements QuestionRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a question registration model instance should use the {@link QuestionRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_question_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_QUESTION_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "QUESTION", Types.VARCHAR },
			{ "QUESTION_REQUESTER_USER_ID", Types.BIGINT },
			{ "QUESTION_DATE", Types.TIMESTAMP },
			{ "STATUS", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_QUESTION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUESTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("QUESTION_REQUESTER_USER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("QUESTION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_question_details (uuid_ VARCHAR(75) null,PROJECT_QUESTION_ID LONG not null primary key,PROJECT_ID LONG,QUESTION TEXT null,QUESTION_REQUESTER_USER_ID LONG,QUESTION_DATE DATE null,STATUS INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_question_details";
	public static final String ORDER_BY_JPQL = " ORDER BY questionRegistration.PROJECT_QUESTION_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_question_details.PROJECT_QUESTION_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.QuestionRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.QuestionRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.QuestionRegistration"),
			true);
	public static final long PROJECT_ID_COLUMN_BITMASK = 1L;
	public static final long PROJECT_QUESTION_ID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static QuestionRegistration toModel(
		QuestionRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QuestionRegistration model = new QuestionRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_QUESTION_ID(soapModel.getPROJECT_QUESTION_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setQUESTION(soapModel.getQUESTION());
		model.setQUESTION_REQUESTER_USER_ID(soapModel.getQUESTION_REQUESTER_USER_ID());
		model.setQUESTION_DATE(soapModel.getQUESTION_DATE());
		model.setSTATUS(soapModel.getSTATUS());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<QuestionRegistration> toModels(
		QuestionRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<QuestionRegistration> models = new ArrayList<QuestionRegistration>(soapModels.length);

		for (QuestionRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.QuestionRegistration"));

	public QuestionRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_QUESTION_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_QUESTION_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_QUESTION_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QuestionRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return QuestionRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_QUESTION_ID", getPROJECT_QUESTION_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("QUESTION", getQUESTION());
		attributes.put("QUESTION_REQUESTER_USER_ID",
			getQUESTION_REQUESTER_USER_ID());
		attributes.put("QUESTION_DATE", getQUESTION_DATE());
		attributes.put("STATUS", getSTATUS());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_QUESTION_ID = (Long)attributes.get("PROJECT_QUESTION_ID");

		if (PROJECT_QUESTION_ID != null) {
			setPROJECT_QUESTION_ID(PROJECT_QUESTION_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		String QUESTION = (String)attributes.get("QUESTION");

		if (QUESTION != null) {
			setQUESTION(QUESTION);
		}

		Long QUESTION_REQUESTER_USER_ID = (Long)attributes.get(
				"QUESTION_REQUESTER_USER_ID");

		if (QUESTION_REQUESTER_USER_ID != null) {
			setQUESTION_REQUESTER_USER_ID(QUESTION_REQUESTER_USER_ID);
		}

		Date QUESTION_DATE = (Date)attributes.get("QUESTION_DATE");

		if (QUESTION_DATE != null) {
			setQUESTION_DATE(QUESTION_DATE);
		}

		Integer STATUS = (Integer)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_QUESTION_ID() {
		return _PROJECT_QUESTION_ID;
	}

	@Override
	public void setPROJECT_QUESTION_ID(long PROJECT_QUESTION_ID) {
		_columnBitmask |= PROJECT_QUESTION_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_QUESTION_ID) {
			_setOriginalPROJECT_QUESTION_ID = true;

			_originalPROJECT_QUESTION_ID = _PROJECT_QUESTION_ID;
		}

		_PROJECT_QUESTION_ID = PROJECT_QUESTION_ID;
	}

	public long getOriginalPROJECT_QUESTION_ID() {
		return _originalPROJECT_QUESTION_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public String getQUESTION() {
		if (_QUESTION == null) {
			return "";
		}
		else {
			return _QUESTION;
		}
	}

	@Override
	public void setQUESTION(String QUESTION) {
		_QUESTION = QUESTION;
	}

	@JSON
	@Override
	public long getQUESTION_REQUESTER_USER_ID() {
		return _QUESTION_REQUESTER_USER_ID;
	}

	@Override
	public void setQUESTION_REQUESTER_USER_ID(long QUESTION_REQUESTER_USER_ID) {
		_QUESTION_REQUESTER_USER_ID = QUESTION_REQUESTER_USER_ID;
	}

	@JSON
	@Override
	public Date getQUESTION_DATE() {
		return _QUESTION_DATE;
	}

	@Override
	public void setQUESTION_DATE(Date QUESTION_DATE) {
		_QUESTION_DATE = QUESTION_DATE;
	}

	@JSON
	@Override
	public int getSTATUS() {
		return _STATUS;
	}

	@Override
	public void setSTATUS(int STATUS) {
		_STATUS = STATUS;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			QuestionRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QuestionRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (QuestionRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuestionRegistrationImpl questionRegistrationImpl = new QuestionRegistrationImpl();

		questionRegistrationImpl.setUuid(getUuid());
		questionRegistrationImpl.setPROJECT_QUESTION_ID(getPROJECT_QUESTION_ID());
		questionRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		questionRegistrationImpl.setQUESTION(getQUESTION());
		questionRegistrationImpl.setQUESTION_REQUESTER_USER_ID(getQUESTION_REQUESTER_USER_ID());
		questionRegistrationImpl.setQUESTION_DATE(getQUESTION_DATE());
		questionRegistrationImpl.setSTATUS(getSTATUS());

		questionRegistrationImpl.resetOriginalValues();

		return questionRegistrationImpl;
	}

	@Override
	public int compareTo(QuestionRegistration questionRegistration) {
		long primaryKey = questionRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof QuestionRegistration)) {
			return false;
		}

		QuestionRegistration questionRegistration = (QuestionRegistration)obj;

		long primaryKey = questionRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		QuestionRegistrationModelImpl questionRegistrationModelImpl = this;

		questionRegistrationModelImpl._originalUuid = questionRegistrationModelImpl._uuid;

		questionRegistrationModelImpl._originalPROJECT_QUESTION_ID = questionRegistrationModelImpl._PROJECT_QUESTION_ID;

		questionRegistrationModelImpl._setOriginalPROJECT_QUESTION_ID = false;

		questionRegistrationModelImpl._originalPROJECT_ID = questionRegistrationModelImpl._PROJECT_ID;

		questionRegistrationModelImpl._setOriginalPROJECT_ID = false;

		questionRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<QuestionRegistration> toCacheModel() {
		QuestionRegistrationCacheModel questionRegistrationCacheModel = new QuestionRegistrationCacheModel();

		questionRegistrationCacheModel.uuid = getUuid();

		String uuid = questionRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			questionRegistrationCacheModel.uuid = null;
		}

		questionRegistrationCacheModel.PROJECT_QUESTION_ID = getPROJECT_QUESTION_ID();

		questionRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		questionRegistrationCacheModel.QUESTION = getQUESTION();

		String QUESTION = questionRegistrationCacheModel.QUESTION;

		if ((QUESTION != null) && (QUESTION.length() == 0)) {
			questionRegistrationCacheModel.QUESTION = null;
		}

		questionRegistrationCacheModel.QUESTION_REQUESTER_USER_ID = getQUESTION_REQUESTER_USER_ID();

		Date QUESTION_DATE = getQUESTION_DATE();

		if (QUESTION_DATE != null) {
			questionRegistrationCacheModel.QUESTION_DATE = QUESTION_DATE.getTime();
		}
		else {
			questionRegistrationCacheModel.QUESTION_DATE = Long.MIN_VALUE;
		}

		questionRegistrationCacheModel.STATUS = getSTATUS();

		return questionRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_QUESTION_ID=");
		sb.append(getPROJECT_QUESTION_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", QUESTION=");
		sb.append(getQUESTION());
		sb.append(", QUESTION_REQUESTER_USER_ID=");
		sb.append(getQUESTION_REQUESTER_USER_ID());
		sb.append(", QUESTION_DATE=");
		sb.append(getQUESTION_DATE());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.QuestionRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_QUESTION_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_QUESTION_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>QUESTION</column-name><column-value><![CDATA[");
		sb.append(getQUESTION());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>QUESTION_REQUESTER_USER_ID</column-name><column-value><![CDATA[");
		sb.append(getQUESTION_REQUESTER_USER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>QUESTION_DATE</column-name><column-value><![CDATA[");
		sb.append(getQUESTION_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = QuestionRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			QuestionRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_QUESTION_ID;
	private long _originalPROJECT_QUESTION_ID;
	private boolean _setOriginalPROJECT_QUESTION_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private String _QUESTION;
	private long _QUESTION_REQUESTER_USER_ID;
	private Date _QUESTION_DATE;
	private int _STATUS;
	private long _columnBitmask;
	private QuestionRegistration _escapedModel;
}