/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.ImageRegistration;
import com.crowd.funding.database.model.ImageRegistrationIMAGEBlobModel;
import com.crowd.funding.database.model.ImageRegistrationModel;
import com.crowd.funding.database.model.ImageRegistrationSoap;
import com.crowd.funding.database.service.ImageRegistrationLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImageRegistration service. Represents a row in the &quot;cf_project_image_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ImageRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImageRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImageRegistrationImpl
 * @see ImageRegistration
 * @see ImageRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ImageRegistrationModelImpl extends BaseModelImpl<ImageRegistration>
	implements ImageRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a image registration model instance should use the {@link ImageRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_image_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_IMAGE_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "IMAGE_NAME", Types.VARCHAR },
			{ "IMAGE_TYPE", Types.VARCHAR },
			{ "IMAGE", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_IMAGE_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("IMAGE_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IMAGE_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IMAGE", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_image_details (uuid_ VARCHAR(75) null,PROJECT_IMAGE_ID LONG not null primary key,PROJECT_ID LONG,IMAGE_NAME VARCHAR(75) null,IMAGE_TYPE VARCHAR(75) null,IMAGE BLOB)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_image_details";
	public static final String ORDER_BY_JPQL = " ORDER BY imageRegistration.PROJECT_IMAGE_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_image_details.PROJECT_IMAGE_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.ImageRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.ImageRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.ImageRegistration"),
			true);
	public static final long PROJECT_ID_COLUMN_BITMASK = 1L;
	public static final long PROJECT_IMAGE_ID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ImageRegistration toModel(ImageRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ImageRegistration model = new ImageRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_IMAGE_ID(soapModel.getPROJECT_IMAGE_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setIMAGE_NAME(soapModel.getIMAGE_NAME());
		model.setIMAGE_TYPE(soapModel.getIMAGE_TYPE());
		model.setIMAGE(soapModel.getIMAGE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ImageRegistration> toModels(
		ImageRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ImageRegistration> models = new ArrayList<ImageRegistration>(soapModels.length);

		for (ImageRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.ImageRegistration"));

	public ImageRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_IMAGE_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_IMAGE_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_IMAGE_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImageRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ImageRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_IMAGE_ID", getPROJECT_IMAGE_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("IMAGE_NAME", getIMAGE_NAME());
		attributes.put("IMAGE_TYPE", getIMAGE_TYPE());
		attributes.put("IMAGE", getIMAGE());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_IMAGE_ID = (Long)attributes.get("PROJECT_IMAGE_ID");

		if (PROJECT_IMAGE_ID != null) {
			setPROJECT_IMAGE_ID(PROJECT_IMAGE_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		String IMAGE_NAME = (String)attributes.get("IMAGE_NAME");

		if (IMAGE_NAME != null) {
			setIMAGE_NAME(IMAGE_NAME);
		}

		String IMAGE_TYPE = (String)attributes.get("IMAGE_TYPE");

		if (IMAGE_TYPE != null) {
			setIMAGE_TYPE(IMAGE_TYPE);
		}

		Blob IMAGE = (Blob)attributes.get("IMAGE");

		if (IMAGE != null) {
			setIMAGE(IMAGE);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_IMAGE_ID() {
		return _PROJECT_IMAGE_ID;
	}

	@Override
	public void setPROJECT_IMAGE_ID(long PROJECT_IMAGE_ID) {
		_columnBitmask |= PROJECT_IMAGE_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_IMAGE_ID) {
			_setOriginalPROJECT_IMAGE_ID = true;

			_originalPROJECT_IMAGE_ID = _PROJECT_IMAGE_ID;
		}

		_PROJECT_IMAGE_ID = PROJECT_IMAGE_ID;
	}

	public long getOriginalPROJECT_IMAGE_ID() {
		return _originalPROJECT_IMAGE_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public String getIMAGE_NAME() {
		if (_IMAGE_NAME == null) {
			return "";
		}
		else {
			return _IMAGE_NAME;
		}
	}

	@Override
	public void setIMAGE_NAME(String IMAGE_NAME) {
		_IMAGE_NAME = IMAGE_NAME;
	}

	@JSON
	@Override
	public String getIMAGE_TYPE() {
		if (_IMAGE_TYPE == null) {
			return "";
		}
		else {
			return _IMAGE_TYPE;
		}
	}

	@Override
	public void setIMAGE_TYPE(String IMAGE_TYPE) {
		_IMAGE_TYPE = IMAGE_TYPE;
	}

	@JSON
	@Override
	public Blob getIMAGE() {
		if (_IMAGEBlobModel == null) {
			try {
				_IMAGEBlobModel = ImageRegistrationLocalServiceUtil.getIMAGEBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_IMAGEBlobModel != null) {
			blob = _IMAGEBlobModel.getIMAGEBlob();
		}

		return blob;
	}

	@Override
	public void setIMAGE(Blob IMAGE) {
		if (_IMAGEBlobModel == null) {
			_IMAGEBlobModel = new ImageRegistrationIMAGEBlobModel(getPrimaryKey(),
					IMAGE);
		}
		else {
			_IMAGEBlobModel.setIMAGEBlob(IMAGE);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ImageRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImageRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImageRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImageRegistrationImpl imageRegistrationImpl = new ImageRegistrationImpl();

		imageRegistrationImpl.setUuid(getUuid());
		imageRegistrationImpl.setPROJECT_IMAGE_ID(getPROJECT_IMAGE_ID());
		imageRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		imageRegistrationImpl.setIMAGE_NAME(getIMAGE_NAME());
		imageRegistrationImpl.setIMAGE_TYPE(getIMAGE_TYPE());

		imageRegistrationImpl.resetOriginalValues();

		return imageRegistrationImpl;
	}

	@Override
	public int compareTo(ImageRegistration imageRegistration) {
		long primaryKey = imageRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImageRegistration)) {
			return false;
		}

		ImageRegistration imageRegistration = (ImageRegistration)obj;

		long primaryKey = imageRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ImageRegistrationModelImpl imageRegistrationModelImpl = this;

		imageRegistrationModelImpl._originalUuid = imageRegistrationModelImpl._uuid;

		imageRegistrationModelImpl._originalPROJECT_IMAGE_ID = imageRegistrationModelImpl._PROJECT_IMAGE_ID;

		imageRegistrationModelImpl._setOriginalPROJECT_IMAGE_ID = false;

		imageRegistrationModelImpl._originalPROJECT_ID = imageRegistrationModelImpl._PROJECT_ID;

		imageRegistrationModelImpl._setOriginalPROJECT_ID = false;

		imageRegistrationModelImpl._IMAGEBlobModel = null;

		imageRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImageRegistration> toCacheModel() {
		ImageRegistrationCacheModel imageRegistrationCacheModel = new ImageRegistrationCacheModel();

		imageRegistrationCacheModel.uuid = getUuid();

		String uuid = imageRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			imageRegistrationCacheModel.uuid = null;
		}

		imageRegistrationCacheModel.PROJECT_IMAGE_ID = getPROJECT_IMAGE_ID();

		imageRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		imageRegistrationCacheModel.IMAGE_NAME = getIMAGE_NAME();

		String IMAGE_NAME = imageRegistrationCacheModel.IMAGE_NAME;

		if ((IMAGE_NAME != null) && (IMAGE_NAME.length() == 0)) {
			imageRegistrationCacheModel.IMAGE_NAME = null;
		}

		imageRegistrationCacheModel.IMAGE_TYPE = getIMAGE_TYPE();

		String IMAGE_TYPE = imageRegistrationCacheModel.IMAGE_TYPE;

		if ((IMAGE_TYPE != null) && (IMAGE_TYPE.length() == 0)) {
			imageRegistrationCacheModel.IMAGE_TYPE = null;
		}

		return imageRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_IMAGE_ID=");
		sb.append(getPROJECT_IMAGE_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", IMAGE_NAME=");
		sb.append(getIMAGE_NAME());
		sb.append(", IMAGE_TYPE=");
		sb.append(getIMAGE_TYPE());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.ImageRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_IMAGE_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_IMAGE_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IMAGE_NAME</column-name><column-value><![CDATA[");
		sb.append(getIMAGE_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IMAGE_TYPE</column-name><column-value><![CDATA[");
		sb.append(getIMAGE_TYPE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ImageRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ImageRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_IMAGE_ID;
	private long _originalPROJECT_IMAGE_ID;
	private boolean _setOriginalPROJECT_IMAGE_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private String _IMAGE_NAME;
	private String _IMAGE_TYPE;
	private ImageRegistrationIMAGEBlobModel _IMAGEBlobModel;
	private long _columnBitmask;
	private ImageRegistration _escapedModel;
}