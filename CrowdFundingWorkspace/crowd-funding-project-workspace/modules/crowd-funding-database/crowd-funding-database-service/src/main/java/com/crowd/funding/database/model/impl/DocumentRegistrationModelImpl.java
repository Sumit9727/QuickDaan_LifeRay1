/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.DocumentRegistration;
import com.crowd.funding.database.model.DocumentRegistrationDOCUMENTBlobModel;
import com.crowd.funding.database.model.DocumentRegistrationModel;
import com.crowd.funding.database.model.DocumentRegistrationSoap;
import com.crowd.funding.database.service.DocumentRegistrationLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DocumentRegistration service. Represents a row in the &quot;cf_project_document_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DocumentRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocumentRegistrationImpl
 * @see DocumentRegistration
 * @see DocumentRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DocumentRegistrationModelImpl extends BaseModelImpl<DocumentRegistration>
	implements DocumentRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document registration model instance should use the {@link DocumentRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_document_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_DOCUMENT_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "DOCUMENT_NAME", Types.VARCHAR },
			{ "DOCUMENT_TYPE", Types.VARCHAR },
			{ "DOCUMENT", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_DOCUMENT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DOCUMENT_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOCUMENT_TYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DOCUMENT", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_document_details (uuid_ VARCHAR(75) null,PROJECT_DOCUMENT_ID LONG not null primary key,PROJECT_ID LONG,DOCUMENT_NAME VARCHAR(1000) null,DOCUMENT_TYPE VARCHAR(75) null,DOCUMENT BLOB)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_document_details";
	public static final String ORDER_BY_JPQL = " ORDER BY documentRegistration.PROJECT_DOCUMENT_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_document_details.PROJECT_DOCUMENT_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.DocumentRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.DocumentRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.DocumentRegistration"),
			true);
	public static final long PROJECT_DOCUMENT_ID_COLUMN_BITMASK = 1L;
	public static final long PROJECT_ID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DocumentRegistration toModel(
		DocumentRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DocumentRegistration model = new DocumentRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_DOCUMENT_ID(soapModel.getPROJECT_DOCUMENT_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setDOCUMENT_NAME(soapModel.getDOCUMENT_NAME());
		model.setDOCUMENT_TYPE(soapModel.getDOCUMENT_TYPE());
		model.setDOCUMENT(soapModel.getDOCUMENT());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DocumentRegistration> toModels(
		DocumentRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DocumentRegistration> models = new ArrayList<DocumentRegistration>(soapModels.length);

		for (DocumentRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.DocumentRegistration"));

	public DocumentRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_DOCUMENT_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_DOCUMENT_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_DOCUMENT_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_DOCUMENT_ID", getPROJECT_DOCUMENT_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("DOCUMENT_NAME", getDOCUMENT_NAME());
		attributes.put("DOCUMENT_TYPE", getDOCUMENT_TYPE());
		attributes.put("DOCUMENT", getDOCUMENT());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_DOCUMENT_ID = (Long)attributes.get("PROJECT_DOCUMENT_ID");

		if (PROJECT_DOCUMENT_ID != null) {
			setPROJECT_DOCUMENT_ID(PROJECT_DOCUMENT_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		String DOCUMENT_NAME = (String)attributes.get("DOCUMENT_NAME");

		if (DOCUMENT_NAME != null) {
			setDOCUMENT_NAME(DOCUMENT_NAME);
		}

		String DOCUMENT_TYPE = (String)attributes.get("DOCUMENT_TYPE");

		if (DOCUMENT_TYPE != null) {
			setDOCUMENT_TYPE(DOCUMENT_TYPE);
		}

		Blob DOCUMENT = (Blob)attributes.get("DOCUMENT");

		if (DOCUMENT != null) {
			setDOCUMENT(DOCUMENT);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_DOCUMENT_ID() {
		return _PROJECT_DOCUMENT_ID;
	}

	@Override
	public void setPROJECT_DOCUMENT_ID(long PROJECT_DOCUMENT_ID) {
		_columnBitmask |= PROJECT_DOCUMENT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_DOCUMENT_ID) {
			_setOriginalPROJECT_DOCUMENT_ID = true;

			_originalPROJECT_DOCUMENT_ID = _PROJECT_DOCUMENT_ID;
		}

		_PROJECT_DOCUMENT_ID = PROJECT_DOCUMENT_ID;
	}

	public long getOriginalPROJECT_DOCUMENT_ID() {
		return _originalPROJECT_DOCUMENT_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public String getDOCUMENT_NAME() {
		if (_DOCUMENT_NAME == null) {
			return "";
		}
		else {
			return _DOCUMENT_NAME;
		}
	}

	@Override
	public void setDOCUMENT_NAME(String DOCUMENT_NAME) {
		_DOCUMENT_NAME = DOCUMENT_NAME;
	}

	@JSON
	@Override
	public String getDOCUMENT_TYPE() {
		if (_DOCUMENT_TYPE == null) {
			return "";
		}
		else {
			return _DOCUMENT_TYPE;
		}
	}

	@Override
	public void setDOCUMENT_TYPE(String DOCUMENT_TYPE) {
		_DOCUMENT_TYPE = DOCUMENT_TYPE;
	}

	@JSON
	@Override
	public Blob getDOCUMENT() {
		if (_DOCUMENTBlobModel == null) {
			try {
				_DOCUMENTBlobModel = DocumentRegistrationLocalServiceUtil.getDOCUMENTBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_DOCUMENTBlobModel != null) {
			blob = _DOCUMENTBlobModel.getDOCUMENTBlob();
		}

		return blob;
	}

	@Override
	public void setDOCUMENT(Blob DOCUMENT) {
		if (_DOCUMENTBlobModel == null) {
			_DOCUMENTBlobModel = new DocumentRegistrationDOCUMENTBlobModel(getPrimaryKey(),
					DOCUMENT);
		}
		else {
			_DOCUMENTBlobModel.setDOCUMENTBlob(DOCUMENT);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DocumentRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocumentRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DocumentRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentRegistrationImpl documentRegistrationImpl = new DocumentRegistrationImpl();

		documentRegistrationImpl.setUuid(getUuid());
		documentRegistrationImpl.setPROJECT_DOCUMENT_ID(getPROJECT_DOCUMENT_ID());
		documentRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		documentRegistrationImpl.setDOCUMENT_NAME(getDOCUMENT_NAME());
		documentRegistrationImpl.setDOCUMENT_TYPE(getDOCUMENT_TYPE());

		documentRegistrationImpl.resetOriginalValues();

		return documentRegistrationImpl;
	}

	@Override
	public int compareTo(DocumentRegistration documentRegistration) {
		long primaryKey = documentRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DocumentRegistration)) {
			return false;
		}

		DocumentRegistration documentRegistration = (DocumentRegistration)obj;

		long primaryKey = documentRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DocumentRegistrationModelImpl documentRegistrationModelImpl = this;

		documentRegistrationModelImpl._originalUuid = documentRegistrationModelImpl._uuid;

		documentRegistrationModelImpl._originalPROJECT_DOCUMENT_ID = documentRegistrationModelImpl._PROJECT_DOCUMENT_ID;

		documentRegistrationModelImpl._setOriginalPROJECT_DOCUMENT_ID = false;

		documentRegistrationModelImpl._originalPROJECT_ID = documentRegistrationModelImpl._PROJECT_ID;

		documentRegistrationModelImpl._setOriginalPROJECT_ID = false;

		documentRegistrationModelImpl._DOCUMENTBlobModel = null;

		documentRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DocumentRegistration> toCacheModel() {
		DocumentRegistrationCacheModel documentRegistrationCacheModel = new DocumentRegistrationCacheModel();

		documentRegistrationCacheModel.uuid = getUuid();

		String uuid = documentRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			documentRegistrationCacheModel.uuid = null;
		}

		documentRegistrationCacheModel.PROJECT_DOCUMENT_ID = getPROJECT_DOCUMENT_ID();

		documentRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		documentRegistrationCacheModel.DOCUMENT_NAME = getDOCUMENT_NAME();

		String DOCUMENT_NAME = documentRegistrationCacheModel.DOCUMENT_NAME;

		if ((DOCUMENT_NAME != null) && (DOCUMENT_NAME.length() == 0)) {
			documentRegistrationCacheModel.DOCUMENT_NAME = null;
		}

		documentRegistrationCacheModel.DOCUMENT_TYPE = getDOCUMENT_TYPE();

		String DOCUMENT_TYPE = documentRegistrationCacheModel.DOCUMENT_TYPE;

		if ((DOCUMENT_TYPE != null) && (DOCUMENT_TYPE.length() == 0)) {
			documentRegistrationCacheModel.DOCUMENT_TYPE = null;
		}

		return documentRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_DOCUMENT_ID=");
		sb.append(getPROJECT_DOCUMENT_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", DOCUMENT_NAME=");
		sb.append(getDOCUMENT_NAME());
		sb.append(", DOCUMENT_TYPE=");
		sb.append(getDOCUMENT_TYPE());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.DocumentRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_DOCUMENT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_DOCUMENT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DOCUMENT_NAME</column-name><column-value><![CDATA[");
		sb.append(getDOCUMENT_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DOCUMENT_TYPE</column-name><column-value><![CDATA[");
		sb.append(getDOCUMENT_TYPE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DocumentRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DocumentRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_DOCUMENT_ID;
	private long _originalPROJECT_DOCUMENT_ID;
	private boolean _setOriginalPROJECT_DOCUMENT_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private String _DOCUMENT_NAME;
	private String _DOCUMENT_TYPE;
	private DocumentRegistrationDOCUMENTBlobModel _DOCUMENTBlobModel;
	private long _columnBitmask;
	private DocumentRegistration _escapedModel;
}