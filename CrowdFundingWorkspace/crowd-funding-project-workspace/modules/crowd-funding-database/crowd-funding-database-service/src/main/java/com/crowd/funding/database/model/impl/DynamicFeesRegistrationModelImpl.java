/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.DynamicFeesRegistration;
import com.crowd.funding.database.model.DynamicFeesRegistrationModel;
import com.crowd.funding.database.model.DynamicFeesRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DynamicFeesRegistration service. Represents a row in the &quot;cf_dynamic_fees_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DynamicFeesRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DynamicFeesRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DynamicFeesRegistrationImpl
 * @see DynamicFeesRegistration
 * @see DynamicFeesRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DynamicFeesRegistrationModelImpl extends BaseModelImpl<DynamicFeesRegistration>
	implements DynamicFeesRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dynamic fees registration model instance should use the {@link DynamicFeesRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_dynamic_fees_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "CATEGORY_ID", Types.BIGINT },
			{ "CATEGORY_NAME", Types.VARCHAR },
			{ "PROCESSING_FEES", Types.FLOAT },
			{ "PROJECT_FEES", Types.FLOAT },
			{ "PAYMENT_GATEWAY_CHARGES", Types.FLOAT },
			{ "OTHER_CHARGES", Types.FLOAT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CATEGORY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CATEGORY_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROCESSING_FEES", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("PROJECT_FEES", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("PAYMENT_GATEWAY_CHARGES", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("OTHER_CHARGES", Types.FLOAT);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_dynamic_fees_details (uuid_ VARCHAR(75) null,CATEGORY_ID LONG not null primary key,CATEGORY_NAME VARCHAR(75) null,PROCESSING_FEES DOUBLE,PROJECT_FEES DOUBLE,PAYMENT_GATEWAY_CHARGES DOUBLE,OTHER_CHARGES DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table cf_dynamic_fees_details";
	public static final String ORDER_BY_JPQL = " ORDER BY dynamicFeesRegistration.CATEGORY_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_dynamic_fees_details.CATEGORY_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.DynamicFeesRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.DynamicFeesRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.DynamicFeesRegistration"),
			true);
	public static final long CATEGORY_ID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DynamicFeesRegistration toModel(
		DynamicFeesRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DynamicFeesRegistration model = new DynamicFeesRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setCATEGORY_ID(soapModel.getCATEGORY_ID());
		model.setCATEGORY_NAME(soapModel.getCATEGORY_NAME());
		model.setPROCESSING_FEES(soapModel.getPROCESSING_FEES());
		model.setPROJECT_FEES(soapModel.getPROJECT_FEES());
		model.setPAYMENT_GATEWAY_CHARGES(soapModel.getPAYMENT_GATEWAY_CHARGES());
		model.setOTHER_CHARGES(soapModel.getOTHER_CHARGES());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DynamicFeesRegistration> toModels(
		DynamicFeesRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DynamicFeesRegistration> models = new ArrayList<DynamicFeesRegistration>(soapModels.length);

		for (DynamicFeesRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.DynamicFeesRegistration"));

	public DynamicFeesRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CATEGORY_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCATEGORY_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CATEGORY_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DynamicFeesRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return DynamicFeesRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("CATEGORY_ID", getCATEGORY_ID());
		attributes.put("CATEGORY_NAME", getCATEGORY_NAME());
		attributes.put("PROCESSING_FEES", getPROCESSING_FEES());
		attributes.put("PROJECT_FEES", getPROJECT_FEES());
		attributes.put("PAYMENT_GATEWAY_CHARGES", getPAYMENT_GATEWAY_CHARGES());
		attributes.put("OTHER_CHARGES", getOTHER_CHARGES());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long CATEGORY_ID = (Long)attributes.get("CATEGORY_ID");

		if (CATEGORY_ID != null) {
			setCATEGORY_ID(CATEGORY_ID);
		}

		String CATEGORY_NAME = (String)attributes.get("CATEGORY_NAME");

		if (CATEGORY_NAME != null) {
			setCATEGORY_NAME(CATEGORY_NAME);
		}

		Float PROCESSING_FEES = (Float)attributes.get("PROCESSING_FEES");

		if (PROCESSING_FEES != null) {
			setPROCESSING_FEES(PROCESSING_FEES);
		}

		Float PROJECT_FEES = (Float)attributes.get("PROJECT_FEES");

		if (PROJECT_FEES != null) {
			setPROJECT_FEES(PROJECT_FEES);
		}

		Float PAYMENT_GATEWAY_CHARGES = (Float)attributes.get(
				"PAYMENT_GATEWAY_CHARGES");

		if (PAYMENT_GATEWAY_CHARGES != null) {
			setPAYMENT_GATEWAY_CHARGES(PAYMENT_GATEWAY_CHARGES);
		}

		Float OTHER_CHARGES = (Float)attributes.get("OTHER_CHARGES");

		if (OTHER_CHARGES != null) {
			setOTHER_CHARGES(OTHER_CHARGES);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCATEGORY_ID() {
		return _CATEGORY_ID;
	}

	@Override
	public void setCATEGORY_ID(long CATEGORY_ID) {
		_columnBitmask |= CATEGORY_ID_COLUMN_BITMASK;

		if (!_setOriginalCATEGORY_ID) {
			_setOriginalCATEGORY_ID = true;

			_originalCATEGORY_ID = _CATEGORY_ID;
		}

		_CATEGORY_ID = CATEGORY_ID;
	}

	public long getOriginalCATEGORY_ID() {
		return _originalCATEGORY_ID;
	}

	@JSON
	@Override
	public String getCATEGORY_NAME() {
		if (_CATEGORY_NAME == null) {
			return "";
		}
		else {
			return _CATEGORY_NAME;
		}
	}

	@Override
	public void setCATEGORY_NAME(String CATEGORY_NAME) {
		_CATEGORY_NAME = CATEGORY_NAME;
	}

	@JSON
	@Override
	public float getPROCESSING_FEES() {
		return _PROCESSING_FEES;
	}

	@Override
	public void setPROCESSING_FEES(float PROCESSING_FEES) {
		_PROCESSING_FEES = PROCESSING_FEES;
	}

	@JSON
	@Override
	public float getPROJECT_FEES() {
		return _PROJECT_FEES;
	}

	@Override
	public void setPROJECT_FEES(float PROJECT_FEES) {
		_PROJECT_FEES = PROJECT_FEES;
	}

	@JSON
	@Override
	public float getPAYMENT_GATEWAY_CHARGES() {
		return _PAYMENT_GATEWAY_CHARGES;
	}

	@Override
	public void setPAYMENT_GATEWAY_CHARGES(float PAYMENT_GATEWAY_CHARGES) {
		_PAYMENT_GATEWAY_CHARGES = PAYMENT_GATEWAY_CHARGES;
	}

	@JSON
	@Override
	public float getOTHER_CHARGES() {
		return _OTHER_CHARGES;
	}

	@Override
	public void setOTHER_CHARGES(float OTHER_CHARGES) {
		_OTHER_CHARGES = OTHER_CHARGES;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DynamicFeesRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DynamicFeesRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DynamicFeesRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DynamicFeesRegistrationImpl dynamicFeesRegistrationImpl = new DynamicFeesRegistrationImpl();

		dynamicFeesRegistrationImpl.setUuid(getUuid());
		dynamicFeesRegistrationImpl.setCATEGORY_ID(getCATEGORY_ID());
		dynamicFeesRegistrationImpl.setCATEGORY_NAME(getCATEGORY_NAME());
		dynamicFeesRegistrationImpl.setPROCESSING_FEES(getPROCESSING_FEES());
		dynamicFeesRegistrationImpl.setPROJECT_FEES(getPROJECT_FEES());
		dynamicFeesRegistrationImpl.setPAYMENT_GATEWAY_CHARGES(getPAYMENT_GATEWAY_CHARGES());
		dynamicFeesRegistrationImpl.setOTHER_CHARGES(getOTHER_CHARGES());

		dynamicFeesRegistrationImpl.resetOriginalValues();

		return dynamicFeesRegistrationImpl;
	}

	@Override
	public int compareTo(DynamicFeesRegistration dynamicFeesRegistration) {
		long primaryKey = dynamicFeesRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DynamicFeesRegistration)) {
			return false;
		}

		DynamicFeesRegistration dynamicFeesRegistration = (DynamicFeesRegistration)obj;

		long primaryKey = dynamicFeesRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DynamicFeesRegistrationModelImpl dynamicFeesRegistrationModelImpl = this;

		dynamicFeesRegistrationModelImpl._originalUuid = dynamicFeesRegistrationModelImpl._uuid;

		dynamicFeesRegistrationModelImpl._originalCATEGORY_ID = dynamicFeesRegistrationModelImpl._CATEGORY_ID;

		dynamicFeesRegistrationModelImpl._setOriginalCATEGORY_ID = false;

		dynamicFeesRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DynamicFeesRegistration> toCacheModel() {
		DynamicFeesRegistrationCacheModel dynamicFeesRegistrationCacheModel = new DynamicFeesRegistrationCacheModel();

		dynamicFeesRegistrationCacheModel.uuid = getUuid();

		String uuid = dynamicFeesRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dynamicFeesRegistrationCacheModel.uuid = null;
		}

		dynamicFeesRegistrationCacheModel.CATEGORY_ID = getCATEGORY_ID();

		dynamicFeesRegistrationCacheModel.CATEGORY_NAME = getCATEGORY_NAME();

		String CATEGORY_NAME = dynamicFeesRegistrationCacheModel.CATEGORY_NAME;

		if ((CATEGORY_NAME != null) && (CATEGORY_NAME.length() == 0)) {
			dynamicFeesRegistrationCacheModel.CATEGORY_NAME = null;
		}

		dynamicFeesRegistrationCacheModel.PROCESSING_FEES = getPROCESSING_FEES();

		dynamicFeesRegistrationCacheModel.PROJECT_FEES = getPROJECT_FEES();

		dynamicFeesRegistrationCacheModel.PAYMENT_GATEWAY_CHARGES = getPAYMENT_GATEWAY_CHARGES();

		dynamicFeesRegistrationCacheModel.OTHER_CHARGES = getOTHER_CHARGES();

		return dynamicFeesRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", CATEGORY_ID=");
		sb.append(getCATEGORY_ID());
		sb.append(", CATEGORY_NAME=");
		sb.append(getCATEGORY_NAME());
		sb.append(", PROCESSING_FEES=");
		sb.append(getPROCESSING_FEES());
		sb.append(", PROJECT_FEES=");
		sb.append(getPROJECT_FEES());
		sb.append(", PAYMENT_GATEWAY_CHARGES=");
		sb.append(getPAYMENT_GATEWAY_CHARGES());
		sb.append(", OTHER_CHARGES=");
		sb.append(getOTHER_CHARGES());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.DynamicFeesRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CATEGORY_ID</column-name><column-value><![CDATA[");
		sb.append(getCATEGORY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CATEGORY_NAME</column-name><column-value><![CDATA[");
		sb.append(getCATEGORY_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROCESSING_FEES</column-name><column-value><![CDATA[");
		sb.append(getPROCESSING_FEES());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_FEES</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_FEES());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PAYMENT_GATEWAY_CHARGES</column-name><column-value><![CDATA[");
		sb.append(getPAYMENT_GATEWAY_CHARGES());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>OTHER_CHARGES</column-name><column-value><![CDATA[");
		sb.append(getOTHER_CHARGES());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DynamicFeesRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DynamicFeesRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _CATEGORY_ID;
	private long _originalCATEGORY_ID;
	private boolean _setOriginalCATEGORY_ID;
	private String _CATEGORY_NAME;
	private float _PROCESSING_FEES;
	private float _PROJECT_FEES;
	private float _PAYMENT_GATEWAY_CHARGES;
	private float _OTHER_CHARGES;
	private long _columnBitmask;
	private DynamicFeesRegistration _escapedModel;
}