/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

/**
 * The base model interface for the DynamicFeesRegistration service. Represents a row in the &quot;cf_dynamic_fees_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.crowd.funding.database.model.impl.DynamicFeesRegistrationModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.crowd.funding.database.model.impl.DynamicFeesRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DynamicFeesRegistration
 * @see com.crowd.funding.database.model.impl.DynamicFeesRegistrationImpl
 * @see com.crowd.funding.database.model.impl.DynamicFeesRegistrationModelImpl
 * @generated
 */
@ProviderType
public interface DynamicFeesRegistrationModel extends BaseModel<DynamicFeesRegistration> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a dynamic fees registration model instance should use the {@link DynamicFeesRegistration} interface instead.
	 */

	/**
	 * Returns the primary key of this dynamic fees registration.
	 *
	 * @return the primary key of this dynamic fees registration
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this dynamic fees registration.
	 *
	 * @param primaryKey the primary key of this dynamic fees registration
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this dynamic fees registration.
	 *
	 * @return the uuid of this dynamic fees registration
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this dynamic fees registration.
	 *
	 * @param uuid the uuid of this dynamic fees registration
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the category_id of this dynamic fees registration.
	 *
	 * @return the category_id of this dynamic fees registration
	 */
	public long getCATEGORY_ID();

	/**
	 * Sets the category_id of this dynamic fees registration.
	 *
	 * @param CATEGORY_ID the category_id of this dynamic fees registration
	 */
	public void setCATEGORY_ID(long CATEGORY_ID);

	/**
	 * Returns the category_name of this dynamic fees registration.
	 *
	 * @return the category_name of this dynamic fees registration
	 */
	@AutoEscape
	public String getCATEGORY_NAME();

	/**
	 * Sets the category_name of this dynamic fees registration.
	 *
	 * @param CATEGORY_NAME the category_name of this dynamic fees registration
	 */
	public void setCATEGORY_NAME(String CATEGORY_NAME);

	/**
	 * Returns the processing_fees of this dynamic fees registration.
	 *
	 * @return the processing_fees of this dynamic fees registration
	 */
	public float getPROCESSING_FEES();

	/**
	 * Sets the processing_fees of this dynamic fees registration.
	 *
	 * @param PROCESSING_FEES the processing_fees of this dynamic fees registration
	 */
	public void setPROCESSING_FEES(float PROCESSING_FEES);

	/**
	 * Returns the project_fees of this dynamic fees registration.
	 *
	 * @return the project_fees of this dynamic fees registration
	 */
	public float getPROJECT_FEES();

	/**
	 * Sets the project_fees of this dynamic fees registration.
	 *
	 * @param PROJECT_FEES the project_fees of this dynamic fees registration
	 */
	public void setPROJECT_FEES(float PROJECT_FEES);

	/**
	 * Returns the payment_gateway_charges of this dynamic fees registration.
	 *
	 * @return the payment_gateway_charges of this dynamic fees registration
	 */
	public float getPAYMENT_GATEWAY_CHARGES();

	/**
	 * Sets the payment_gateway_charges of this dynamic fees registration.
	 *
	 * @param PAYMENT_GATEWAY_CHARGES the payment_gateway_charges of this dynamic fees registration
	 */
	public void setPAYMENT_GATEWAY_CHARGES(float PAYMENT_GATEWAY_CHARGES);

	/**
	 * Returns the other_charges of this dynamic fees registration.
	 *
	 * @return the other_charges of this dynamic fees registration
	 */
	public float getOTHER_CHARGES();

	/**
	 * Sets the other_charges of this dynamic fees registration.
	 *
	 * @param OTHER_CHARGES the other_charges of this dynamic fees registration
	 */
	public void setOTHER_CHARGES(float OTHER_CHARGES);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(DynamicFeesRegistration dynamicFeesRegistration);

	@Override
	public int hashCode();

	@Override
	public CacheModel<DynamicFeesRegistration> toCacheModel();

	@Override
	public DynamicFeesRegistration toEscapedModel();

	@Override
	public DynamicFeesRegistration toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}