/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.ProjectExtentionRegistration;
import com.crowd.funding.database.model.ProjectExtentionRegistrationModel;
import com.crowd.funding.database.model.ProjectExtentionRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectExtentionRegistration service. Represents a row in the &quot;cf_extention_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectExtentionRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectExtentionRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectExtentionRegistrationImpl
 * @see ProjectExtentionRegistration
 * @see ProjectExtentionRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectExtentionRegistrationModelImpl extends BaseModelImpl<ProjectExtentionRegistration>
	implements ProjectExtentionRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project extention registration model instance should use the {@link ProjectExtentionRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_extention_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_EXTENTION_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "EXTENTION_DATE", Types.TIMESTAMP },
			{ "COMMENT", Types.VARCHAR },
			{ "STATUS", Types.INTEGER },
			{ "DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_EXTENTION_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("EXTENTION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("COMMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_extention_details (uuid_ VARCHAR(75) null,PROJECT_EXTENTION_ID LONG not null primary key,PROJECT_ID LONG,EXTENTION_DATE DATE null,COMMENT VARCHAR(75) null,STATUS INTEGER,DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cf_extention_details";
	public static final String ORDER_BY_JPQL = " ORDER BY projectExtentionRegistration.PROJECT_EXTENTION_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_extention_details.PROJECT_EXTENTION_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.ProjectExtentionRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.ProjectExtentionRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.ProjectExtentionRegistration"),
			true);
	public static final long PROJECT_ID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long PROJECT_EXTENTION_ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectExtentionRegistration toModel(
		ProjectExtentionRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectExtentionRegistration model = new ProjectExtentionRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_EXTENTION_ID(soapModel.getPROJECT_EXTENTION_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setEXTENTION_DATE(soapModel.getEXTENTION_DATE());
		model.setCOMMENT(soapModel.getCOMMENT());
		model.setSTATUS(soapModel.getSTATUS());
		model.setDATE(soapModel.getDATE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectExtentionRegistration> toModels(
		ProjectExtentionRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectExtentionRegistration> models = new ArrayList<ProjectExtentionRegistration>(soapModels.length);

		for (ProjectExtentionRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.ProjectExtentionRegistration"));

	public ProjectExtentionRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_EXTENTION_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_EXTENTION_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_EXTENTION_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectExtentionRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectExtentionRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_EXTENTION_ID", getPROJECT_EXTENTION_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("EXTENTION_DATE", getEXTENTION_DATE());
		attributes.put("COMMENT", getCOMMENT());
		attributes.put("STATUS", getSTATUS());
		attributes.put("DATE", getDATE());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_EXTENTION_ID = (Long)attributes.get("PROJECT_EXTENTION_ID");

		if (PROJECT_EXTENTION_ID != null) {
			setPROJECT_EXTENTION_ID(PROJECT_EXTENTION_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		Date EXTENTION_DATE = (Date)attributes.get("EXTENTION_DATE");

		if (EXTENTION_DATE != null) {
			setEXTENTION_DATE(EXTENTION_DATE);
		}

		String COMMENT = (String)attributes.get("COMMENT");

		if (COMMENT != null) {
			setCOMMENT(COMMENT);
		}

		Integer STATUS = (Integer)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}

		Date DATE = (Date)attributes.get("DATE");

		if (DATE != null) {
			setDATE(DATE);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_EXTENTION_ID() {
		return _PROJECT_EXTENTION_ID;
	}

	@Override
	public void setPROJECT_EXTENTION_ID(long PROJECT_EXTENTION_ID) {
		_PROJECT_EXTENTION_ID = PROJECT_EXTENTION_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public Date getEXTENTION_DATE() {
		return _EXTENTION_DATE;
	}

	@Override
	public void setEXTENTION_DATE(Date EXTENTION_DATE) {
		_EXTENTION_DATE = EXTENTION_DATE;
	}

	@JSON
	@Override
	public String getCOMMENT() {
		if (_COMMENT == null) {
			return "";
		}
		else {
			return _COMMENT;
		}
	}

	@Override
	public void setCOMMENT(String COMMENT) {
		_COMMENT = COMMENT;
	}

	@JSON
	@Override
	public int getSTATUS() {
		return _STATUS;
	}

	@Override
	public void setSTATUS(int STATUS) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalSTATUS) {
			_setOriginalSTATUS = true;

			_originalSTATUS = _STATUS;
		}

		_STATUS = STATUS;
	}

	public int getOriginalSTATUS() {
		return _originalSTATUS;
	}

	@JSON
	@Override
	public Date getDATE() {
		return _DATE;
	}

	@Override
	public void setDATE(Date DATE) {
		_DATE = DATE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectExtentionRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectExtentionRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectExtentionRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectExtentionRegistrationImpl projectExtentionRegistrationImpl = new ProjectExtentionRegistrationImpl();

		projectExtentionRegistrationImpl.setUuid(getUuid());
		projectExtentionRegistrationImpl.setPROJECT_EXTENTION_ID(getPROJECT_EXTENTION_ID());
		projectExtentionRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		projectExtentionRegistrationImpl.setEXTENTION_DATE(getEXTENTION_DATE());
		projectExtentionRegistrationImpl.setCOMMENT(getCOMMENT());
		projectExtentionRegistrationImpl.setSTATUS(getSTATUS());
		projectExtentionRegistrationImpl.setDATE(getDATE());

		projectExtentionRegistrationImpl.resetOriginalValues();

		return projectExtentionRegistrationImpl;
	}

	@Override
	public int compareTo(
		ProjectExtentionRegistration projectExtentionRegistration) {
		long primaryKey = projectExtentionRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectExtentionRegistration)) {
			return false;
		}

		ProjectExtentionRegistration projectExtentionRegistration = (ProjectExtentionRegistration)obj;

		long primaryKey = projectExtentionRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectExtentionRegistrationModelImpl projectExtentionRegistrationModelImpl =
			this;

		projectExtentionRegistrationModelImpl._originalUuid = projectExtentionRegistrationModelImpl._uuid;

		projectExtentionRegistrationModelImpl._originalPROJECT_ID = projectExtentionRegistrationModelImpl._PROJECT_ID;

		projectExtentionRegistrationModelImpl._setOriginalPROJECT_ID = false;

		projectExtentionRegistrationModelImpl._originalSTATUS = projectExtentionRegistrationModelImpl._STATUS;

		projectExtentionRegistrationModelImpl._setOriginalSTATUS = false;

		projectExtentionRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectExtentionRegistration> toCacheModel() {
		ProjectExtentionRegistrationCacheModel projectExtentionRegistrationCacheModel =
			new ProjectExtentionRegistrationCacheModel();

		projectExtentionRegistrationCacheModel.uuid = getUuid();

		String uuid = projectExtentionRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectExtentionRegistrationCacheModel.uuid = null;
		}

		projectExtentionRegistrationCacheModel.PROJECT_EXTENTION_ID = getPROJECT_EXTENTION_ID();

		projectExtentionRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		Date EXTENTION_DATE = getEXTENTION_DATE();

		if (EXTENTION_DATE != null) {
			projectExtentionRegistrationCacheModel.EXTENTION_DATE = EXTENTION_DATE.getTime();
		}
		else {
			projectExtentionRegistrationCacheModel.EXTENTION_DATE = Long.MIN_VALUE;
		}

		projectExtentionRegistrationCacheModel.COMMENT = getCOMMENT();

		String COMMENT = projectExtentionRegistrationCacheModel.COMMENT;

		if ((COMMENT != null) && (COMMENT.length() == 0)) {
			projectExtentionRegistrationCacheModel.COMMENT = null;
		}

		projectExtentionRegistrationCacheModel.STATUS = getSTATUS();

		Date DATE = getDATE();

		if (DATE != null) {
			projectExtentionRegistrationCacheModel.DATE = DATE.getTime();
		}
		else {
			projectExtentionRegistrationCacheModel.DATE = Long.MIN_VALUE;
		}

		return projectExtentionRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_EXTENTION_ID=");
		sb.append(getPROJECT_EXTENTION_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", EXTENTION_DATE=");
		sb.append(getEXTENTION_DATE());
		sb.append(", COMMENT=");
		sb.append(getCOMMENT());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append(", DATE=");
		sb.append(getDATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"com.crowd.funding.database.model.ProjectExtentionRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_EXTENTION_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_EXTENTION_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EXTENTION_DATE</column-name><column-value><![CDATA[");
		sb.append(getEXTENTION_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>COMMENT</column-name><column-value><![CDATA[");
		sb.append(getCOMMENT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DATE</column-name><column-value><![CDATA[");
		sb.append(getDATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectExtentionRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectExtentionRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_EXTENTION_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private Date _EXTENTION_DATE;
	private String _COMMENT;
	private int _STATUS;
	private int _originalSTATUS;
	private boolean _setOriginalSTATUS;
	private Date _DATE;
	private long _columnBitmask;
	private ProjectExtentionRegistration _escapedModel;
}