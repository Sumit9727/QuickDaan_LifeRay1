/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.HistoryLogRegistration;
import com.crowd.funding.database.model.HistoryLogRegistrationModel;
import com.crowd.funding.database.model.HistoryLogRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the HistoryLogRegistration service. Represents a row in the &quot;cf_history_log_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HistoryLogRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoryLogRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HistoryLogRegistrationImpl
 * @see HistoryLogRegistration
 * @see HistoryLogRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class HistoryLogRegistrationModelImpl extends BaseModelImpl<HistoryLogRegistration>
	implements HistoryLogRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a history log registration model instance should use the {@link HistoryLogRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_history_log_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "HISTORY_ID", Types.BIGINT },
			{ "USER_ID", Types.BIGINT },
			{ "URL", Types.VARCHAR },
			{ "DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("HISTORY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("URL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_history_log_details (uuid_ VARCHAR(75) null,HISTORY_ID LONG not null primary key,USER_ID LONG,URL VARCHAR(75) null,DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cf_history_log_details";
	public static final String ORDER_BY_JPQL = " ORDER BY historyLogRegistration.HISTORY_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_history_log_details.HISTORY_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.HistoryLogRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.HistoryLogRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.HistoryLogRegistration"),
			true);
	public static final long USER_ID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long HISTORY_ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HistoryLogRegistration toModel(
		HistoryLogRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		HistoryLogRegistration model = new HistoryLogRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setHISTORY_ID(soapModel.getHISTORY_ID());
		model.setUSER_ID(soapModel.getUSER_ID());
		model.setURL(soapModel.getURL());
		model.setDATE(soapModel.getDATE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HistoryLogRegistration> toModels(
		HistoryLogRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<HistoryLogRegistration> models = new ArrayList<HistoryLogRegistration>(soapModels.length);

		for (HistoryLogRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.HistoryLogRegistration"));

	public HistoryLogRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _HISTORY_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHISTORY_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _HISTORY_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HistoryLogRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return HistoryLogRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("HISTORY_ID", getHISTORY_ID());
		attributes.put("USER_ID", getUSER_ID());
		attributes.put("URL", getURL());
		attributes.put("DATE", getDATE());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long HISTORY_ID = (Long)attributes.get("HISTORY_ID");

		if (HISTORY_ID != null) {
			setHISTORY_ID(HISTORY_ID);
		}

		Long USER_ID = (Long)attributes.get("USER_ID");

		if (USER_ID != null) {
			setUSER_ID(USER_ID);
		}

		String URL = (String)attributes.get("URL");

		if (URL != null) {
			setURL(URL);
		}

		Date DATE = (Date)attributes.get("DATE");

		if (DATE != null) {
			setDATE(DATE);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getHISTORY_ID() {
		return _HISTORY_ID;
	}

	@Override
	public void setHISTORY_ID(long HISTORY_ID) {
		_HISTORY_ID = HISTORY_ID;
	}

	@JSON
	@Override
	public long getUSER_ID() {
		return _USER_ID;
	}

	@Override
	public void setUSER_ID(long USER_ID) {
		_columnBitmask |= USER_ID_COLUMN_BITMASK;

		if (!_setOriginalUSER_ID) {
			_setOriginalUSER_ID = true;

			_originalUSER_ID = _USER_ID;
		}

		_USER_ID = USER_ID;
	}

	public long getOriginalUSER_ID() {
		return _originalUSER_ID;
	}

	@JSON
	@Override
	public String getURL() {
		if (_URL == null) {
			return "";
		}
		else {
			return _URL;
		}
	}

	@Override
	public void setURL(String URL) {
		_URL = URL;
	}

	@JSON
	@Override
	public Date getDATE() {
		return _DATE;
	}

	@Override
	public void setDATE(Date DATE) {
		_DATE = DATE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			HistoryLogRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HistoryLogRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HistoryLogRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistoryLogRegistrationImpl historyLogRegistrationImpl = new HistoryLogRegistrationImpl();

		historyLogRegistrationImpl.setUuid(getUuid());
		historyLogRegistrationImpl.setHISTORY_ID(getHISTORY_ID());
		historyLogRegistrationImpl.setUSER_ID(getUSER_ID());
		historyLogRegistrationImpl.setURL(getURL());
		historyLogRegistrationImpl.setDATE(getDATE());

		historyLogRegistrationImpl.resetOriginalValues();

		return historyLogRegistrationImpl;
	}

	@Override
	public int compareTo(HistoryLogRegistration historyLogRegistration) {
		long primaryKey = historyLogRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HistoryLogRegistration)) {
			return false;
		}

		HistoryLogRegistration historyLogRegistration = (HistoryLogRegistration)obj;

		long primaryKey = historyLogRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HistoryLogRegistrationModelImpl historyLogRegistrationModelImpl = this;

		historyLogRegistrationModelImpl._originalUuid = historyLogRegistrationModelImpl._uuid;

		historyLogRegistrationModelImpl._originalUSER_ID = historyLogRegistrationModelImpl._USER_ID;

		historyLogRegistrationModelImpl._setOriginalUSER_ID = false;

		historyLogRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HistoryLogRegistration> toCacheModel() {
		HistoryLogRegistrationCacheModel historyLogRegistrationCacheModel = new HistoryLogRegistrationCacheModel();

		historyLogRegistrationCacheModel.uuid = getUuid();

		String uuid = historyLogRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			historyLogRegistrationCacheModel.uuid = null;
		}

		historyLogRegistrationCacheModel.HISTORY_ID = getHISTORY_ID();

		historyLogRegistrationCacheModel.USER_ID = getUSER_ID();

		historyLogRegistrationCacheModel.URL = getURL();

		String URL = historyLogRegistrationCacheModel.URL;

		if ((URL != null) && (URL.length() == 0)) {
			historyLogRegistrationCacheModel.URL = null;
		}

		Date DATE = getDATE();

		if (DATE != null) {
			historyLogRegistrationCacheModel.DATE = DATE.getTime();
		}
		else {
			historyLogRegistrationCacheModel.DATE = Long.MIN_VALUE;
		}

		return historyLogRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", HISTORY_ID=");
		sb.append(getHISTORY_ID());
		sb.append(", USER_ID=");
		sb.append(getUSER_ID());
		sb.append(", URL=");
		sb.append(getURL());
		sb.append(", DATE=");
		sb.append(getDATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.HistoryLogRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>HISTORY_ID</column-name><column-value><![CDATA[");
		sb.append(getHISTORY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>USER_ID</column-name><column-value><![CDATA[");
		sb.append(getUSER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>URL</column-name><column-value><![CDATA[");
		sb.append(getURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DATE</column-name><column-value><![CDATA[");
		sb.append(getDATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = HistoryLogRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			HistoryLogRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _HISTORY_ID;
	private long _USER_ID;
	private long _originalUSER_ID;
	private boolean _setOriginalUSER_ID;
	private String _URL;
	private Date _DATE;
	private long _columnBitmask;
	private HistoryLogRegistration _escapedModel;
}