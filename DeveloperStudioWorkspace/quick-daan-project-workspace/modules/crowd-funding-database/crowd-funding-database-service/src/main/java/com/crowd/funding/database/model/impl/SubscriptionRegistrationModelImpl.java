/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.SubscriptionRegistration;
import com.crowd.funding.database.model.SubscriptionRegistrationModel;
import com.crowd.funding.database.model.SubscriptionRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SubscriptionRegistration service. Represents a row in the &quot;cf_subscription_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SubscriptionRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubscriptionRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubscriptionRegistrationImpl
 * @see SubscriptionRegistration
 * @see SubscriptionRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SubscriptionRegistrationModelImpl extends BaseModelImpl<SubscriptionRegistration>
	implements SubscriptionRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subscription registration model instance should use the {@link SubscriptionRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_subscription_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "SUSCRIBER_ID", Types.BIGINT },
			{ "EMAIL", Types.VARCHAR },
			{ "STATUS", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("SUSCRIBER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("EMAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_subscription_details (uuid_ VARCHAR(75) null,SUSCRIBER_ID LONG not null primary key,EMAIL VARCHAR(75) null,STATUS INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cf_subscription_details";
	public static final String ORDER_BY_JPQL = " ORDER BY subscriptionRegistration.SUSCRIBER_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_subscription_details.SUSCRIBER_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.SubscriptionRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.SubscriptionRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.SubscriptionRegistration"),
			true);
	public static final long EMAIL_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long SUSCRIBER_ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SubscriptionRegistration toModel(
		SubscriptionRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SubscriptionRegistration model = new SubscriptionRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setSUSCRIBER_ID(soapModel.getSUSCRIBER_ID());
		model.setEMAIL(soapModel.getEMAIL());
		model.setSTATUS(soapModel.getSTATUS());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SubscriptionRegistration> toModels(
		SubscriptionRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SubscriptionRegistration> models = new ArrayList<SubscriptionRegistration>(soapModels.length);

		for (SubscriptionRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.SubscriptionRegistration"));

	public SubscriptionRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _SUSCRIBER_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSUSCRIBER_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SUSCRIBER_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SubscriptionRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return SubscriptionRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("SUSCRIBER_ID", getSUSCRIBER_ID());
		attributes.put("EMAIL", getEMAIL());
		attributes.put("STATUS", getSTATUS());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long SUSCRIBER_ID = (Long)attributes.get("SUSCRIBER_ID");

		if (SUSCRIBER_ID != null) {
			setSUSCRIBER_ID(SUSCRIBER_ID);
		}

		String EMAIL = (String)attributes.get("EMAIL");

		if (EMAIL != null) {
			setEMAIL(EMAIL);
		}

		Integer STATUS = (Integer)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSUSCRIBER_ID() {
		return _SUSCRIBER_ID;
	}

	@Override
	public void setSUSCRIBER_ID(long SUSCRIBER_ID) {
		_SUSCRIBER_ID = SUSCRIBER_ID;
	}

	@JSON
	@Override
	public String getEMAIL() {
		if (_EMAIL == null) {
			return "";
		}
		else {
			return _EMAIL;
		}
	}

	@Override
	public void setEMAIL(String EMAIL) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEMAIL == null) {
			_originalEMAIL = _EMAIL;
		}

		_EMAIL = EMAIL;
	}

	public String getOriginalEMAIL() {
		return GetterUtil.getString(_originalEMAIL);
	}

	@JSON
	@Override
	public int getSTATUS() {
		return _STATUS;
	}

	@Override
	public void setSTATUS(int STATUS) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalSTATUS) {
			_setOriginalSTATUS = true;

			_originalSTATUS = _STATUS;
		}

		_STATUS = STATUS;
	}

	public int getOriginalSTATUS() {
		return _originalSTATUS;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SubscriptionRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SubscriptionRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SubscriptionRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubscriptionRegistrationImpl subscriptionRegistrationImpl = new SubscriptionRegistrationImpl();

		subscriptionRegistrationImpl.setUuid(getUuid());
		subscriptionRegistrationImpl.setSUSCRIBER_ID(getSUSCRIBER_ID());
		subscriptionRegistrationImpl.setEMAIL(getEMAIL());
		subscriptionRegistrationImpl.setSTATUS(getSTATUS());

		subscriptionRegistrationImpl.resetOriginalValues();

		return subscriptionRegistrationImpl;
	}

	@Override
	public int compareTo(SubscriptionRegistration subscriptionRegistration) {
		long primaryKey = subscriptionRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SubscriptionRegistration)) {
			return false;
		}

		SubscriptionRegistration subscriptionRegistration = (SubscriptionRegistration)obj;

		long primaryKey = subscriptionRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SubscriptionRegistrationModelImpl subscriptionRegistrationModelImpl = this;

		subscriptionRegistrationModelImpl._originalUuid = subscriptionRegistrationModelImpl._uuid;

		subscriptionRegistrationModelImpl._originalEMAIL = subscriptionRegistrationModelImpl._EMAIL;

		subscriptionRegistrationModelImpl._originalSTATUS = subscriptionRegistrationModelImpl._STATUS;

		subscriptionRegistrationModelImpl._setOriginalSTATUS = false;

		subscriptionRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SubscriptionRegistration> toCacheModel() {
		SubscriptionRegistrationCacheModel subscriptionRegistrationCacheModel = new SubscriptionRegistrationCacheModel();

		subscriptionRegistrationCacheModel.uuid = getUuid();

		String uuid = subscriptionRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			subscriptionRegistrationCacheModel.uuid = null;
		}

		subscriptionRegistrationCacheModel.SUSCRIBER_ID = getSUSCRIBER_ID();

		subscriptionRegistrationCacheModel.EMAIL = getEMAIL();

		String EMAIL = subscriptionRegistrationCacheModel.EMAIL;

		if ((EMAIL != null) && (EMAIL.length() == 0)) {
			subscriptionRegistrationCacheModel.EMAIL = null;
		}

		subscriptionRegistrationCacheModel.STATUS = getSTATUS();

		return subscriptionRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", SUSCRIBER_ID=");
		sb.append(getSUSCRIBER_ID());
		sb.append(", EMAIL=");
		sb.append(getEMAIL());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.SubscriptionRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SUSCRIBER_ID</column-name><column-value><![CDATA[");
		sb.append(getSUSCRIBER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EMAIL</column-name><column-value><![CDATA[");
		sb.append(getEMAIL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SubscriptionRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SubscriptionRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _SUSCRIBER_ID;
	private String _EMAIL;
	private String _originalEMAIL;
	private int _STATUS;
	private int _originalSTATUS;
	private boolean _setOriginalSTATUS;
	private long _columnBitmask;
	private SubscriptionRegistration _escapedModel;
}