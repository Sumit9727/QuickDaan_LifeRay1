/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.FundAccountRegistration;
import com.crowd.funding.database.model.FundAccountRegistrationModel;
import com.crowd.funding.database.model.FundAccountRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FundAccountRegistration service. Represents a row in the &quot;cf_project_account_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FundAccountRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FundAccountRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FundAccountRegistrationImpl
 * @see FundAccountRegistration
 * @see FundAccountRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FundAccountRegistrationModelImpl extends BaseModelImpl<FundAccountRegistration>
	implements FundAccountRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fund account registration model instance should use the {@link FundAccountRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_account_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "ACCOUNT_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "ACCOUNT_NO", Types.BIGINT },
			{ "ACCOUNT_HOLDER_NAME", Types.VARCHAR },
			{ "IFSC_CODE", Types.VARCHAR },
			{ "UPI_NO", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACCOUNT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ACCOUNT_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ACCOUNT_HOLDER_NAME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("IFSC_CODE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("UPI_NO", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_account_details (uuid_ VARCHAR(75) null,ACCOUNT_ID LONG not null primary key,PROJECT_ID LONG,ACCOUNT_NO LONG,ACCOUNT_HOLDER_NAME VARCHAR(1000) null,IFSC_CODE VARCHAR(75) null,UPI_NO VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_account_details";
	public static final String ORDER_BY_JPQL = " ORDER BY fundAccountRegistration.ACCOUNT_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_account_details.ACCOUNT_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.FundAccountRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.FundAccountRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.FundAccountRegistration"),
			true);
	public static final long ACCOUNT_ID_COLUMN_BITMASK = 1L;
	public static final long PROJECT_ID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FundAccountRegistration toModel(
		FundAccountRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FundAccountRegistration model = new FundAccountRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setACCOUNT_ID(soapModel.getACCOUNT_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setACCOUNT_NO(soapModel.getACCOUNT_NO());
		model.setACCOUNT_HOLDER_NAME(soapModel.getACCOUNT_HOLDER_NAME());
		model.setIFSC_CODE(soapModel.getIFSC_CODE());
		model.setUPI_NO(soapModel.getUPI_NO());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FundAccountRegistration> toModels(
		FundAccountRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FundAccountRegistration> models = new ArrayList<FundAccountRegistration>(soapModels.length);

		for (FundAccountRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.FundAccountRegistration"));

	public FundAccountRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ACCOUNT_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setACCOUNT_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ACCOUNT_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FundAccountRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return FundAccountRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("ACCOUNT_ID", getACCOUNT_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("ACCOUNT_NO", getACCOUNT_NO());
		attributes.put("ACCOUNT_HOLDER_NAME", getACCOUNT_HOLDER_NAME());
		attributes.put("IFSC_CODE", getIFSC_CODE());
		attributes.put("UPI_NO", getUPI_NO());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long ACCOUNT_ID = (Long)attributes.get("ACCOUNT_ID");

		if (ACCOUNT_ID != null) {
			setACCOUNT_ID(ACCOUNT_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		Long ACCOUNT_NO = (Long)attributes.get("ACCOUNT_NO");

		if (ACCOUNT_NO != null) {
			setACCOUNT_NO(ACCOUNT_NO);
		}

		String ACCOUNT_HOLDER_NAME = (String)attributes.get(
				"ACCOUNT_HOLDER_NAME");

		if (ACCOUNT_HOLDER_NAME != null) {
			setACCOUNT_HOLDER_NAME(ACCOUNT_HOLDER_NAME);
		}

		String IFSC_CODE = (String)attributes.get("IFSC_CODE");

		if (IFSC_CODE != null) {
			setIFSC_CODE(IFSC_CODE);
		}

		String UPI_NO = (String)attributes.get("UPI_NO");

		if (UPI_NO != null) {
			setUPI_NO(UPI_NO);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getACCOUNT_ID() {
		return _ACCOUNT_ID;
	}

	@Override
	public void setACCOUNT_ID(long ACCOUNT_ID) {
		_columnBitmask |= ACCOUNT_ID_COLUMN_BITMASK;

		if (!_setOriginalACCOUNT_ID) {
			_setOriginalACCOUNT_ID = true;

			_originalACCOUNT_ID = _ACCOUNT_ID;
		}

		_ACCOUNT_ID = ACCOUNT_ID;
	}

	public long getOriginalACCOUNT_ID() {
		return _originalACCOUNT_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public long getACCOUNT_NO() {
		return _ACCOUNT_NO;
	}

	@Override
	public void setACCOUNT_NO(long ACCOUNT_NO) {
		_ACCOUNT_NO = ACCOUNT_NO;
	}

	@JSON
	@Override
	public String getACCOUNT_HOLDER_NAME() {
		if (_ACCOUNT_HOLDER_NAME == null) {
			return "";
		}
		else {
			return _ACCOUNT_HOLDER_NAME;
		}
	}

	@Override
	public void setACCOUNT_HOLDER_NAME(String ACCOUNT_HOLDER_NAME) {
		_ACCOUNT_HOLDER_NAME = ACCOUNT_HOLDER_NAME;
	}

	@JSON
	@Override
	public String getIFSC_CODE() {
		if (_IFSC_CODE == null) {
			return "";
		}
		else {
			return _IFSC_CODE;
		}
	}

	@Override
	public void setIFSC_CODE(String IFSC_CODE) {
		_IFSC_CODE = IFSC_CODE;
	}

	@JSON
	@Override
	public String getUPI_NO() {
		if (_UPI_NO == null) {
			return "";
		}
		else {
			return _UPI_NO;
		}
	}

	@Override
	public void setUPI_NO(String UPI_NO) {
		_UPI_NO = UPI_NO;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FundAccountRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FundAccountRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FundAccountRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FundAccountRegistrationImpl fundAccountRegistrationImpl = new FundAccountRegistrationImpl();

		fundAccountRegistrationImpl.setUuid(getUuid());
		fundAccountRegistrationImpl.setACCOUNT_ID(getACCOUNT_ID());
		fundAccountRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		fundAccountRegistrationImpl.setACCOUNT_NO(getACCOUNT_NO());
		fundAccountRegistrationImpl.setACCOUNT_HOLDER_NAME(getACCOUNT_HOLDER_NAME());
		fundAccountRegistrationImpl.setIFSC_CODE(getIFSC_CODE());
		fundAccountRegistrationImpl.setUPI_NO(getUPI_NO());

		fundAccountRegistrationImpl.resetOriginalValues();

		return fundAccountRegistrationImpl;
	}

	@Override
	public int compareTo(FundAccountRegistration fundAccountRegistration) {
		long primaryKey = fundAccountRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FundAccountRegistration)) {
			return false;
		}

		FundAccountRegistration fundAccountRegistration = (FundAccountRegistration)obj;

		long primaryKey = fundAccountRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FundAccountRegistrationModelImpl fundAccountRegistrationModelImpl = this;

		fundAccountRegistrationModelImpl._originalUuid = fundAccountRegistrationModelImpl._uuid;

		fundAccountRegistrationModelImpl._originalACCOUNT_ID = fundAccountRegistrationModelImpl._ACCOUNT_ID;

		fundAccountRegistrationModelImpl._setOriginalACCOUNT_ID = false;

		fundAccountRegistrationModelImpl._originalPROJECT_ID = fundAccountRegistrationModelImpl._PROJECT_ID;

		fundAccountRegistrationModelImpl._setOriginalPROJECT_ID = false;

		fundAccountRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FundAccountRegistration> toCacheModel() {
		FundAccountRegistrationCacheModel fundAccountRegistrationCacheModel = new FundAccountRegistrationCacheModel();

		fundAccountRegistrationCacheModel.uuid = getUuid();

		String uuid = fundAccountRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fundAccountRegistrationCacheModel.uuid = null;
		}

		fundAccountRegistrationCacheModel.ACCOUNT_ID = getACCOUNT_ID();

		fundAccountRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		fundAccountRegistrationCacheModel.ACCOUNT_NO = getACCOUNT_NO();

		fundAccountRegistrationCacheModel.ACCOUNT_HOLDER_NAME = getACCOUNT_HOLDER_NAME();

		String ACCOUNT_HOLDER_NAME = fundAccountRegistrationCacheModel.ACCOUNT_HOLDER_NAME;

		if ((ACCOUNT_HOLDER_NAME != null) &&
				(ACCOUNT_HOLDER_NAME.length() == 0)) {
			fundAccountRegistrationCacheModel.ACCOUNT_HOLDER_NAME = null;
		}

		fundAccountRegistrationCacheModel.IFSC_CODE = getIFSC_CODE();

		String IFSC_CODE = fundAccountRegistrationCacheModel.IFSC_CODE;

		if ((IFSC_CODE != null) && (IFSC_CODE.length() == 0)) {
			fundAccountRegistrationCacheModel.IFSC_CODE = null;
		}

		fundAccountRegistrationCacheModel.UPI_NO = getUPI_NO();

		String UPI_NO = fundAccountRegistrationCacheModel.UPI_NO;

		if ((UPI_NO != null) && (UPI_NO.length() == 0)) {
			fundAccountRegistrationCacheModel.UPI_NO = null;
		}

		return fundAccountRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", ACCOUNT_ID=");
		sb.append(getACCOUNT_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", ACCOUNT_NO=");
		sb.append(getACCOUNT_NO());
		sb.append(", ACCOUNT_HOLDER_NAME=");
		sb.append(getACCOUNT_HOLDER_NAME());
		sb.append(", IFSC_CODE=");
		sb.append(getIFSC_CODE());
		sb.append(", UPI_NO=");
		sb.append(getUPI_NO());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.FundAccountRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACCOUNT_ID</column-name><column-value><![CDATA[");
		sb.append(getACCOUNT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACCOUNT_NO</column-name><column-value><![CDATA[");
		sb.append(getACCOUNT_NO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ACCOUNT_HOLDER_NAME</column-name><column-value><![CDATA[");
		sb.append(getACCOUNT_HOLDER_NAME());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IFSC_CODE</column-name><column-value><![CDATA[");
		sb.append(getIFSC_CODE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UPI_NO</column-name><column-value><![CDATA[");
		sb.append(getUPI_NO());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FundAccountRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FundAccountRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _ACCOUNT_ID;
	private long _originalACCOUNT_ID;
	private boolean _setOriginalACCOUNT_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private long _ACCOUNT_NO;
	private String _ACCOUNT_HOLDER_NAME;
	private String _IFSC_CODE;
	private String _UPI_NO;
	private long _columnBitmask;
	private FundAccountRegistration _escapedModel;
}