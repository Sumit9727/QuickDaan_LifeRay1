/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.FundRegistration;
import com.crowd.funding.database.model.FundRegistrationModel;
import com.crowd.funding.database.model.FundRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FundRegistration service. Represents a row in the &quot;cf_project_fund_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FundRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FundRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FundRegistrationImpl
 * @see FundRegistration
 * @see FundRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FundRegistrationModelImpl extends BaseModelImpl<FundRegistration>
	implements FundRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fund registration model instance should use the {@link FundRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_fund_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_FUND_ID", Types.BIGINT },
			{ "DONOR_ID", Types.BIGINT },
			{ "PROJECT_ID", Types.BIGINT },
			{ "CATEGORY_ID", Types.BIGINT },
			{ "CURRENCY", Types.VARCHAR },
			{ "DONATED_AMOUNT", Types.FLOAT },
			{ "DONOR_USER_ID", Types.BIGINT },
			{ "DONOR_STATUS", Types.INTEGER },
			{ "COMMENT", Types.VARCHAR },
			{ "DONATED_DATE", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_FUND_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DONOR_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CATEGORY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CURRENCY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DONATED_AMOUNT", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("DONOR_USER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DONOR_STATUS", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("COMMENT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DONATED_DATE", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_fund_details (uuid_ VARCHAR(75) null,PROJECT_FUND_ID LONG not null primary key,DONOR_ID LONG,PROJECT_ID LONG,CATEGORY_ID LONG,CURRENCY VARCHAR(75) null,DONATED_AMOUNT DOUBLE,DONOR_USER_ID LONG,DONOR_STATUS INTEGER,COMMENT TEXT null,DONATED_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_fund_details";
	public static final String ORDER_BY_JPQL = " ORDER BY fundRegistration.PROJECT_FUND_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_fund_details.PROJECT_FUND_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.FundRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.FundRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.FundRegistration"),
			true);
	public static final long CATEGORY_ID_COLUMN_BITMASK = 1L;
	public static final long DONOR_USER_ID_COLUMN_BITMASK = 2L;
	public static final long PROJECT_FUND_ID_COLUMN_BITMASK = 4L;
	public static final long PROJECT_ID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FundRegistration toModel(FundRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FundRegistration model = new FundRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_FUND_ID(soapModel.getPROJECT_FUND_ID());
		model.setDONOR_ID(soapModel.getDONOR_ID());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setCATEGORY_ID(soapModel.getCATEGORY_ID());
		model.setCURRENCY(soapModel.getCURRENCY());
		model.setDONATED_AMOUNT(soapModel.getDONATED_AMOUNT());
		model.setDONOR_USER_ID(soapModel.getDONOR_USER_ID());
		model.setDONOR_STATUS(soapModel.getDONOR_STATUS());
		model.setCOMMENT(soapModel.getCOMMENT());
		model.setDONATED_DATE(soapModel.getDONATED_DATE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FundRegistration> toModels(
		FundRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FundRegistration> models = new ArrayList<FundRegistration>(soapModels.length);

		for (FundRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.FundRegistration"));

	public FundRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_FUND_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_FUND_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_FUND_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FundRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return FundRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_FUND_ID", getPROJECT_FUND_ID());
		attributes.put("DONOR_ID", getDONOR_ID());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("CATEGORY_ID", getCATEGORY_ID());
		attributes.put("CURRENCY", getCURRENCY());
		attributes.put("DONATED_AMOUNT", getDONATED_AMOUNT());
		attributes.put("DONOR_USER_ID", getDONOR_USER_ID());
		attributes.put("DONOR_STATUS", getDONOR_STATUS());
		attributes.put("COMMENT", getCOMMENT());
		attributes.put("DONATED_DATE", getDONATED_DATE());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_FUND_ID = (Long)attributes.get("PROJECT_FUND_ID");

		if (PROJECT_FUND_ID != null) {
			setPROJECT_FUND_ID(PROJECT_FUND_ID);
		}

		Long DONOR_ID = (Long)attributes.get("DONOR_ID");

		if (DONOR_ID != null) {
			setDONOR_ID(DONOR_ID);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		Long CATEGORY_ID = (Long)attributes.get("CATEGORY_ID");

		if (CATEGORY_ID != null) {
			setCATEGORY_ID(CATEGORY_ID);
		}

		String CURRENCY = (String)attributes.get("CURRENCY");

		if (CURRENCY != null) {
			setCURRENCY(CURRENCY);
		}

		Float DONATED_AMOUNT = (Float)attributes.get("DONATED_AMOUNT");

		if (DONATED_AMOUNT != null) {
			setDONATED_AMOUNT(DONATED_AMOUNT);
		}

		Long DONOR_USER_ID = (Long)attributes.get("DONOR_USER_ID");

		if (DONOR_USER_ID != null) {
			setDONOR_USER_ID(DONOR_USER_ID);
		}

		Integer DONOR_STATUS = (Integer)attributes.get("DONOR_STATUS");

		if (DONOR_STATUS != null) {
			setDONOR_STATUS(DONOR_STATUS);
		}

		String COMMENT = (String)attributes.get("COMMENT");

		if (COMMENT != null) {
			setCOMMENT(COMMENT);
		}

		Date DONATED_DATE = (Date)attributes.get("DONATED_DATE");

		if (DONATED_DATE != null) {
			setDONATED_DATE(DONATED_DATE);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_FUND_ID() {
		return _PROJECT_FUND_ID;
	}

	@Override
	public void setPROJECT_FUND_ID(long PROJECT_FUND_ID) {
		_columnBitmask |= PROJECT_FUND_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_FUND_ID) {
			_setOriginalPROJECT_FUND_ID = true;

			_originalPROJECT_FUND_ID = _PROJECT_FUND_ID;
		}

		_PROJECT_FUND_ID = PROJECT_FUND_ID;
	}

	public long getOriginalPROJECT_FUND_ID() {
		return _originalPROJECT_FUND_ID;
	}

	@JSON
	@Override
	public long getDONOR_ID() {
		return _DONOR_ID;
	}

	@Override
	public void setDONOR_ID(long DONOR_ID) {
		_DONOR_ID = DONOR_ID;
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public long getCATEGORY_ID() {
		return _CATEGORY_ID;
	}

	@Override
	public void setCATEGORY_ID(long CATEGORY_ID) {
		_columnBitmask |= CATEGORY_ID_COLUMN_BITMASK;

		if (!_setOriginalCATEGORY_ID) {
			_setOriginalCATEGORY_ID = true;

			_originalCATEGORY_ID = _CATEGORY_ID;
		}

		_CATEGORY_ID = CATEGORY_ID;
	}

	public long getOriginalCATEGORY_ID() {
		return _originalCATEGORY_ID;
	}

	@JSON
	@Override
	public String getCURRENCY() {
		if (_CURRENCY == null) {
			return "";
		}
		else {
			return _CURRENCY;
		}
	}

	@Override
	public void setCURRENCY(String CURRENCY) {
		_CURRENCY = CURRENCY;
	}

	@JSON
	@Override
	public float getDONATED_AMOUNT() {
		return _DONATED_AMOUNT;
	}

	@Override
	public void setDONATED_AMOUNT(float DONATED_AMOUNT) {
		_DONATED_AMOUNT = DONATED_AMOUNT;
	}

	@JSON
	@Override
	public long getDONOR_USER_ID() {
		return _DONOR_USER_ID;
	}

	@Override
	public void setDONOR_USER_ID(long DONOR_USER_ID) {
		_columnBitmask |= DONOR_USER_ID_COLUMN_BITMASK;

		if (!_setOriginalDONOR_USER_ID) {
			_setOriginalDONOR_USER_ID = true;

			_originalDONOR_USER_ID = _DONOR_USER_ID;
		}

		_DONOR_USER_ID = DONOR_USER_ID;
	}

	public long getOriginalDONOR_USER_ID() {
		return _originalDONOR_USER_ID;
	}

	@JSON
	@Override
	public int getDONOR_STATUS() {
		return _DONOR_STATUS;
	}

	@Override
	public void setDONOR_STATUS(int DONOR_STATUS) {
		_DONOR_STATUS = DONOR_STATUS;
	}

	@JSON
	@Override
	public String getCOMMENT() {
		if (_COMMENT == null) {
			return "";
		}
		else {
			return _COMMENT;
		}
	}

	@Override
	public void setCOMMENT(String COMMENT) {
		_COMMENT = COMMENT;
	}

	@JSON
	@Override
	public Date getDONATED_DATE() {
		return _DONATED_DATE;
	}

	@Override
	public void setDONATED_DATE(Date DONATED_DATE) {
		_DONATED_DATE = DONATED_DATE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FundRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FundRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FundRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FundRegistrationImpl fundRegistrationImpl = new FundRegistrationImpl();

		fundRegistrationImpl.setUuid(getUuid());
		fundRegistrationImpl.setPROJECT_FUND_ID(getPROJECT_FUND_ID());
		fundRegistrationImpl.setDONOR_ID(getDONOR_ID());
		fundRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		fundRegistrationImpl.setCATEGORY_ID(getCATEGORY_ID());
		fundRegistrationImpl.setCURRENCY(getCURRENCY());
		fundRegistrationImpl.setDONATED_AMOUNT(getDONATED_AMOUNT());
		fundRegistrationImpl.setDONOR_USER_ID(getDONOR_USER_ID());
		fundRegistrationImpl.setDONOR_STATUS(getDONOR_STATUS());
		fundRegistrationImpl.setCOMMENT(getCOMMENT());
		fundRegistrationImpl.setDONATED_DATE(getDONATED_DATE());

		fundRegistrationImpl.resetOriginalValues();

		return fundRegistrationImpl;
	}

	@Override
	public int compareTo(FundRegistration fundRegistration) {
		long primaryKey = fundRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FundRegistration)) {
			return false;
		}

		FundRegistration fundRegistration = (FundRegistration)obj;

		long primaryKey = fundRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FundRegistrationModelImpl fundRegistrationModelImpl = this;

		fundRegistrationModelImpl._originalUuid = fundRegistrationModelImpl._uuid;

		fundRegistrationModelImpl._originalPROJECT_FUND_ID = fundRegistrationModelImpl._PROJECT_FUND_ID;

		fundRegistrationModelImpl._setOriginalPROJECT_FUND_ID = false;

		fundRegistrationModelImpl._originalPROJECT_ID = fundRegistrationModelImpl._PROJECT_ID;

		fundRegistrationModelImpl._setOriginalPROJECT_ID = false;

		fundRegistrationModelImpl._originalCATEGORY_ID = fundRegistrationModelImpl._CATEGORY_ID;

		fundRegistrationModelImpl._setOriginalCATEGORY_ID = false;

		fundRegistrationModelImpl._originalDONOR_USER_ID = fundRegistrationModelImpl._DONOR_USER_ID;

		fundRegistrationModelImpl._setOriginalDONOR_USER_ID = false;

		fundRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FundRegistration> toCacheModel() {
		FundRegistrationCacheModel fundRegistrationCacheModel = new FundRegistrationCacheModel();

		fundRegistrationCacheModel.uuid = getUuid();

		String uuid = fundRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fundRegistrationCacheModel.uuid = null;
		}

		fundRegistrationCacheModel.PROJECT_FUND_ID = getPROJECT_FUND_ID();

		fundRegistrationCacheModel.DONOR_ID = getDONOR_ID();

		fundRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		fundRegistrationCacheModel.CATEGORY_ID = getCATEGORY_ID();

		fundRegistrationCacheModel.CURRENCY = getCURRENCY();

		String CURRENCY = fundRegistrationCacheModel.CURRENCY;

		if ((CURRENCY != null) && (CURRENCY.length() == 0)) {
			fundRegistrationCacheModel.CURRENCY = null;
		}

		fundRegistrationCacheModel.DONATED_AMOUNT = getDONATED_AMOUNT();

		fundRegistrationCacheModel.DONOR_USER_ID = getDONOR_USER_ID();

		fundRegistrationCacheModel.DONOR_STATUS = getDONOR_STATUS();

		fundRegistrationCacheModel.COMMENT = getCOMMENT();

		String COMMENT = fundRegistrationCacheModel.COMMENT;

		if ((COMMENT != null) && (COMMENT.length() == 0)) {
			fundRegistrationCacheModel.COMMENT = null;
		}

		Date DONATED_DATE = getDONATED_DATE();

		if (DONATED_DATE != null) {
			fundRegistrationCacheModel.DONATED_DATE = DONATED_DATE.getTime();
		}
		else {
			fundRegistrationCacheModel.DONATED_DATE = Long.MIN_VALUE;
		}

		return fundRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_FUND_ID=");
		sb.append(getPROJECT_FUND_ID());
		sb.append(", DONOR_ID=");
		sb.append(getDONOR_ID());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", CATEGORY_ID=");
		sb.append(getCATEGORY_ID());
		sb.append(", CURRENCY=");
		sb.append(getCURRENCY());
		sb.append(", DONATED_AMOUNT=");
		sb.append(getDONATED_AMOUNT());
		sb.append(", DONOR_USER_ID=");
		sb.append(getDONOR_USER_ID());
		sb.append(", DONOR_STATUS=");
		sb.append(getDONOR_STATUS());
		sb.append(", COMMENT=");
		sb.append(getCOMMENT());
		sb.append(", DONATED_DATE=");
		sb.append(getDONATED_DATE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.FundRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_FUND_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_FUND_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DONOR_ID</column-name><column-value><![CDATA[");
		sb.append(getDONOR_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CATEGORY_ID</column-name><column-value><![CDATA[");
		sb.append(getCATEGORY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CURRENCY</column-name><column-value><![CDATA[");
		sb.append(getCURRENCY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DONATED_AMOUNT</column-name><column-value><![CDATA[");
		sb.append(getDONATED_AMOUNT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DONOR_USER_ID</column-name><column-value><![CDATA[");
		sb.append(getDONOR_USER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DONOR_STATUS</column-name><column-value><![CDATA[");
		sb.append(getDONOR_STATUS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>COMMENT</column-name><column-value><![CDATA[");
		sb.append(getCOMMENT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DONATED_DATE</column-name><column-value><![CDATA[");
		sb.append(getDONATED_DATE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FundRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FundRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_FUND_ID;
	private long _originalPROJECT_FUND_ID;
	private boolean _setOriginalPROJECT_FUND_ID;
	private long _DONOR_ID;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private long _CATEGORY_ID;
	private long _originalCATEGORY_ID;
	private boolean _setOriginalCATEGORY_ID;
	private String _CURRENCY;
	private float _DONATED_AMOUNT;
	private long _DONOR_USER_ID;
	private long _originalDONOR_USER_ID;
	private boolean _setOriginalDONOR_USER_ID;
	private int _DONOR_STATUS;
	private String _COMMENT;
	private Date _DONATED_DATE;
	private long _columnBitmask;
	private FundRegistration _escapedModel;
}